// ==UserScript==
// @name         GetUranium AutoBoost v2 (UI-edition, anti-429+reload)
// @namespace    https://github.com/k2wGG
// @version      2.4
// @description  –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±—É—Å—Ç–µ—Ä–æ–≤ c –∞–Ω—Ç–∏-–¥—É–±–ª–µ–º, –∞–Ω—Ç–∏-429, keep-alive –∏ –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à–µ–º
// @match        https://www.geturanium.io/*
// @run-at       document-idle
// @inject-into  page
// @grant        none
// ==/UserScript==

;(function () {
  'use strict';
  console.info('üöÄ AutoBoost v2.4 loaded');

  /*‚îÄ‚îÄ‚îÄ‚îÄ 0. isTrusted –¥–ª—è React ‚îÄ‚îÄ‚îÄ‚îÄ*/
  if (!Event.prototype.__ab_trusted) {
    [Event, MouseEvent].forEach(C =>
      Object.defineProperty(C.prototype, 'isTrusted', {
        get() { return true },
        configurable: true
      })
    );
    Event.prototype.__ab_trusted = true;
  }

  /*‚îÄ‚îÄ‚îÄ‚îÄ 1. –ö–æ–Ω—Ñ–∏–≥ + storage ‚îÄ‚îÄ‚îÄ‚îÄ*/
  const DEF = {
    enabled:    true,
    autoAC:     true,
    autoSM:     true,
    autoCB:     true,
    keepAlive:  true,
    autoReload: true,
    logEach:    10    // —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏
  };
  const LS = 'gu-autoboost';
  const cfg = loadConfig();
  const save = () => localStorage.setItem(LS, JSON.stringify(cfg));

  function loadConfig() {
    try { return { ...DEF, ...JSON.parse(localStorage.getItem(LS) || '{}') } }
    catch { return { ...DEF } }
  }

  /*‚îÄ‚îÄ‚îÄ‚îÄ 2. –§—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ*/
  const rnd = (min, max) => min + Math.random() * (max - min);

  /*‚îÄ‚îÄ‚îÄ‚îÄ 3. Keep-alive ‚îÄ‚îÄ‚îÄ‚îÄ*/
  setInterval(() => {
    if (!cfg.keepAlive) return;
    fetch('/favicon.ico', { cache: 'no-store', mode: 'no-cors' }).catch(() => {});
    document.dispatchEvent(new MouseEvent('mousemove', { bubbles: true }));
    document.dispatchEvent(new Event('visibilitychange'));
  }, rnd(90, 120) * 1e3);

  /*‚îÄ‚îÄ‚îÄ‚îÄ 4. –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –¥–ª—è 429 ‚îÄ‚îÄ‚îÄ‚îÄ*/
  let backoffUntil = 0;
  const _fetch = window.fetch.bind(window);
  window.fetch = (...args) => _fetch(...args).then(res => {
    if (res.status === 429) {
      backoffUntil = Date.now() + 5 * 60e3;
      console.warn('[AutoBoost] 429 received, pausing clicks for 5 min');
    }
    return res;
  }).catch(err => Promise.reject(err));

  /*‚îÄ‚îÄ‚îÄ‚îÄ 5. –ê–≤—Ç–æ–∫–ª–∏–∫–∏ –±—É—Å—Ç–µ—Ä–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ*/
  const LABEL = {
    autoAC: 'auto collector',
    autoSM: 'shard multiplier',
    autoCB: 'conveyor booster'
  };
  const timers    = {};
  const lastClick = {};
  const nextLog   = { value: Date.now() };

  function buttons() { return Array.from(document.querySelectorAll('button')); }
  function findBtn(key) {
    const label = LABEL[key];
    return buttons().find(b => b.innerText.toLowerCase().startsWith(label));
  }

  function restMs(btn) {
    if (!btn || !btn.disabled) return 0;
    if (/activating/i.test(btn.innerText)) return 3_000;
    const m = /(\d+)\s*m.*?(\d+)\s*s/i.exec(btn.innerText);
    return m ? (60 * +m[1] + +m[2]) * 1e3 : 600e3;
  }

  function doClick(el) {
    ['mousedown', 'mouseup', 'click'].forEach(type =>
      el.dispatchEvent(new MouseEvent(type, { bubbles: true, cancelable: true, view: window }))
    );
  }

  function schedule(key) {
    clearTimeout(timers[key]);

    // –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ 429
    if (Date.now() < backoffUntil) {
      const wait = backoffUntil - Date.now() + 1e3;
      timers[key] = setTimeout(() => schedule(key), wait);
      return;
    }

    if (!cfg.enabled) {
      timers[key] = setTimeout(() => schedule(key), 3e3);
      return;
    }

    const btn = findBtn(key), rem = restMs(btn);

    if (rem === 0) {
      const since = Date.now() - (lastClick[key] || 0);
      const minGap = 8e3 + rnd(0, 2e3); // 8‚Äì10 —Å –∞–Ω—Ç–∏-–¥—É–±–ª—å
      if (cfg[key] && btn && !btn.disabled && since > minGap) {
        doClick(btn);
        lastClick[key] = Date.now();
        log(`‚ö° clicked ¬´${key}¬ª`);
      }
      timers[key] = setTimeout(() => schedule(key), 1e3);
      return;
    }

    const delay = rem + 1e3 + rnd(0, 1500); // +1‚Äì2.5 —Å –¥–∂–∏—Ç—Ç–µ—Ä–∞
    log(`‚è≥ ${key}: ${Math.round(rem/1e3)} s left`);
    timers[key] = setTimeout(() => schedule(key), delay);
  }

  function startAll() {
    Object.keys(LABEL).forEach(schedule);
  }

  /*‚îÄ‚îÄ‚îÄ‚îÄ 6. –ê–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à ‚âà50 –º–∏–Ω ‚îÄ‚îÄ‚îÄ‚îÄ*/
  function scheduleReload() {
    if (!cfg.autoReload) return;
    const ms = rnd(48, 52) * 60e3; // 48‚Äì52 –º–∏–Ω
    console.info(`[AutoBoost] reload in ‚âà${Math.round(ms/6e4)} min`);
    setTimeout(() => window.location.reload(), ms);
  }

  /*‚îÄ‚îÄ‚îÄ‚îÄ 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ*/
  function init() {
    if (!findBtn('autoAC')) {
      requestAnimationFrame(init);
      return;
    }
    console.info('‚úÖ AutoBoost initialised');
    startAll();
    ensureUI();
    scheduleReload();
  }

  if (document.readyState === 'complete') init();
  else window.addEventListener('load', init, { once: true });

  new MutationObserver(m => {
    if (m.some(x => x.type === 'childList')) startAll();
  }).observe(document.documentElement, { childList: true, subtree: true });

  /*‚îÄ‚îÄ‚îÄ‚îÄ 8. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ*/
  function log(msg) {
    if (!cfg.logEach) return;
    const now = Date.now();
    if (now >= nextLog.value) {
      console.log(`[AutoBoost] ${msg}`);
      nextLog.value = now + cfg.logEach * 1e3;
    }
  }

  /*‚îÄ‚îÄ‚îÄ‚îÄ 9. UI ‚îÄ‚îÄ‚îÄ‚îÄ*/
  function ensureUI() {
    if (document.querySelector('.gu-gear')) return;

    const css = `
      .gu-gear{position:fixed;top:12px;right:12px;width:36px;height:36px;
        background:#1b1b25dd;border-radius:50%;display:flex;align-items:center;
        justify-content:center;cursor:pointer;z-index:2147483647;
        color:#8cf;font-size:20px;user-select:none;transition:transform .3s}
      .gu-gear:hover{transform:rotate(60deg)}
      .gu-panel{position:fixed;top:56px;right:12px;width:260px;background:#1b1b25f2;
        padding:12px 14px;border-radius:8px;font:13px/1.4 sans-serif;
        color:#cee;box-shadow:0 4px 12px #000b;z-index:2147483647;
        backdrop-filter:blur(4px)}
      .gu-panel hr{border-color:#444;margin:6px -14px}
      .gu-panel input[type=number]{width:60px;margin-left:4px;background:#111;color:#fee;
        border:1px solid #555;border-radius:4px;padding:2px 4px}
      .gu-panel label{display:block;margin:5px 0}
      .gu-panel button{margin-top:6px;padding:2px 8px;background:#444;border:0;
        border-radius:4px;color:#eee;cursor:pointer}`;
    const html = `
      <div class="gu-gear" title="AutoBoost settings">‚öôÔ∏è</div>
      <div class="gu-panel" style="display:none">
        <label><input type="checkbox" id="gu-enabled"> script enabled</label><hr>
        <label><input type="checkbox" id="gu-ac"> Auto Collector</label>
        <label><input type="checkbox" id="gu-sm"> Shard Multiplier</label>
        <label><input type="checkbox" id="gu-cb"> Conveyor Booster</label><hr>
        <label><input type="checkbox" id="gu-ka"> keep-alive</label>
        <label><input type="checkbox" id="gu-reload"> auto-reload ‚âà50 min</label><hr>
        log each <input type="number" id="gu-log" min="0" step="1"> s
        <button id="gu-reset">reset</button>
      </div>`;

    document.head.insertAdjacentHTML('beforeend', `<style>${css}</style>`);
    document.body.insertAdjacentHTML('beforeend', html);

    const $    = sel => document.querySelector(sel);
    const gear = $('.gu-gear');
    const pnl  = $('.gu-panel');

    function syncUI() {
      $('#gu-enabled').checked  = cfg.enabled;
      $('#gu-ac').checked       = cfg.autoAC;
      $('#gu-sm').checked       = cfg.autoSM;
      $('#gu-cb').checked       = cfg.autoCB;
      $('#gu-ka').checked       = cfg.keepAlive;
      $('#gu-reload').checked   = cfg.autoReload;
      $('#gu-log').value        = cfg.logEach;
    }
    syncUI();

    $('#gu-enabled').onchange = e => { cfg.enabled   = e.target.checked; save(); startAll(); };
    $('#gu-ac').onchange      = e => { cfg.autoAC    = e.target.checked; save(); };
    $('#gu-sm').onchange      = e => { cfg.autoSM    = e.target.checked; save(); };
    $('#gu-cb').onchange      = e => { cfg.autoCB    = e.target.checked; save(); };
    $('#gu-ka').onchange      = e => { cfg.keepAlive = e.target.checked; save(); };
    $('#gu-reload').onchange  = e => { cfg.autoReload= e.target.checked; save(); };
    $('#gu-log').onchange     = e => { cfg.logEach   = Math.max(0,~~e.target.value); save(); };
    $('#gu-reset').onclick    = () => { Object.assign(cfg, DEF); save(); syncUI(); startAll(); console.clear(); };

    const togglePanel = () => pnl.style.display = pnl.style.display === 'none' ? 'block' : 'none';
    gear.onclick = togglePanel;
    window.addEventListener('keydown', e => {
      if (e.altKey && e.key.toLowerCase() === 'g') { e.preventDefault(); togglePanel(); }
    });

    // —Å–ª–µ–¥–∏–º, —á—Ç–æ–±—ã React –Ω–µ —É–¥–∞–ª–∏–ª –Ω–∞—à—É –ø–∞–Ω–µ–ª—å
    new MutationObserver(() => setTimeout(ensureUI, 0))
      .observe(document.body, { childList: true });
  }
})();
