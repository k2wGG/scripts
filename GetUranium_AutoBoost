// ==UserScript==
// @name         GetUranium AutoBoost v2
// @namespace    https://github.com/k2wGG
// @version      2.5
// @description  –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±—É—Å—Ç–µ—Ä–æ–≤ —Å –∞–Ω—Ç–∏-–¥—É–±–ª–µ–º, –∞–Ω—Ç–∏-429, keep-alive, –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à–µ–º –∏ Vercel-keepalive
// @match        https://www.geturanium.io/*
// @run-at       document-idle
// @inject-into  page
// @grant        none
// ==/UserScript==

;(function(){
  'use strict';
  console.info('üöÄ AutoBoost v2.5 loaded');

  // 0. isTrusted –¥–ª—è React
  if(!Event.prototype.__ab_trusted){
    [Event,MouseEvent].forEach(C=>{
      Object.defineProperty(C.prototype,'isTrusted',{
        get(){return true;}, configurable:true
      });
    });
    Event.prototype.__ab_trusted = true;
  }

  // 1. –ö–æ–Ω—Ñ–∏–≥ + storage
  const DEF = {
    enabled:       true,
    autoAC:        true,
    autoSM:        true,
    autoCB:        true,
    keepAlive:     true,
    autoReload:    true,
    reloadMinutes: 50,  // –º–∏–Ω
    logEach:       10   // —Å–µ–∫
  };
  const LS = 'gu-autoboost';
  const cfg = loadConfig();
  function loadConfig(){
    try{ return {...DEF,...JSON.parse(localStorage.getItem(LS)||'{}')}; }
    catch{ return {...DEF}; }
  }
  function save(){ localStorage.setItem(LS,JSON.stringify(cfg)); }

  // helper rnd
  const rnd = (min,max)=>min + Math.random()*(max-min);

  // 2. Keep-alive: —Ç–∏—Ö–∏–π fetch + —Å–æ–±—ã—Ç–∏—è
  setInterval(()=>{
    if(!cfg.keepAlive) return;
    fetch('/favicon.ico',{cache:'no-store',mode:'no-cors'}).catch(()=>{});
    document.dispatchEvent(new MouseEvent('mousemove',{bubbles:true}));
    document.dispatchEvent(new Event('visibilitychange'));
  }, rnd(90,120)*1000);

  // 3. –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –¥–ª—è 429
  let backoffUntil = 0;
  const _fetch = window.fetch.bind(window);
  window.fetch = (...args)=>_fetch(...args).then(res=>{
    if(res.status===429){
      backoffUntil = Date.now()+5*60*1000;
      console.warn('[AutoBoost] 429 ‚Üí –ø–∞—É–∑–∞ 5 –º–∏–Ω');
    }
    return res;
  });

  // 4. –ê–≤—Ç–æ-–∫–ª–∏–∫–∏ –±—É—Å—Ç–µ—Ä–æ–≤
  const LABELS = {
    autoAC:'auto collector',
    autoSM:'shard multiplier',
    autoCB:'conveyor booster'
  };
  const timers = {}, lastClick={}, nextLog={value:Date.now()};
  function findBtn(key){
    return Array.from(document.querySelectorAll('button'))
      .find(b=>b.innerText.toLowerCase().startsWith(LABELS[key]));
  }
  function getCooldown(btn){
    if(!btn||!btn.disabled) return 0;
    if(/activating/i.test(btn.innerText)) return 3000;
    const m=/(\d+)\s*m.*?(\d+)\s*s/i.exec(btn.innerText);
    return m ? (60*+m[1] + +m[2])*1000 : 600000;
  }
  function clickBtn(el){
    ['mousedown','mouseup','click'].forEach(t=>
      el.dispatchEvent(new MouseEvent(t,{bubbles:true,cancelable:true,view:window}))
    );
  }
  function schedule(key){
    clearTimeout(timers[key]);
    if(Date.now()<backoffUntil){
      timers[key]=setTimeout(()=>schedule(key),backoffUntil-Date.now()+1000);
      return;
    }
    if(!cfg.enabled){
      timers[key]=setTimeout(()=>schedule(key),3000);
      return;
    }
    const btn=findBtn(key), cd=getCooldown(btn);
    if(cd===0){
      const since=Date.now()-(lastClick[key]||0),
            gap=8000+rnd(0,2000);
      if(cfg[key]&&btn&&!btn.disabled&&since>gap){
        clickBtn(btn);
        lastClick[key]=Date.now();
        log(`‚ö° ${key}`);
      }
      timers[key]=setTimeout(()=>schedule(key),1000);
    } else {
      const delay=cd+1000+rnd(0,1500);
      log(`‚è≥ ${key}: ${Math.round(cd/1000)}s`);
      timers[key]=setTimeout(()=>schedule(key),delay);
    }
  }
  function startAll(){ Object.keys(LABELS).forEach(schedule); }

  // 5. –ê–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à
  function scheduleReload(){
    if(!cfg.autoReload) return;
    const ms=cfg.reloadMinutes*60*1000;
    console.info(`[AutoBoost] reload in ${cfg.reloadMinutes} min`);
    setTimeout(()=>location.reload(),ms);
  }

  // 6. Vercel keep-alive —á–µ—Ä–µ–∑ iframe
  function scheduleVercel(){
    if(!cfg.keepAlive) return;
    const ms=rnd(50,55)*60*1000;
    console.info(`[AutoBoost] Vercel keepalive in ‚âà${Math.round(ms/60000)} min`);
    setTimeout(()=>{
      const f=document.createElement('iframe');
      f.style.display='none';
      f.src='/';
      document.body.append(f);
      setTimeout(()=>f.remove(),15000);
      scheduleVercel();
    },ms);
  }

  // 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  function init(){
    if(!findBtn('autoAC')){
      requestAnimationFrame(init);
      return;
    }
    console.info('‚úÖ AutoBoost initialized');
    startAll();
    renderUI();
    scheduleReload();
    scheduleVercel();
  }
  if(document.readyState==='complete') init();
  else window.addEventListener('load',init,{once:true});
  new MutationObserver(m=>m.some(x=>x.type==='childList')&&startAll())
    .observe(document.documentElement,{childList:true,subtree:true});

  // 8. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  function log(msg){
    if(!cfg.logEach) return;
    const now=Date.now();
    if(now>=nextLog.value){
      console.log(`[AutoBoost] ${msg}`);
      nextLog.value=now+cfg.logEach*1000;
    }
  }

  // 9. –ú–∏–Ω–∏-GUI
  function renderUI(){
    if(document.querySelector('.gu-gear')) return;

    // CSS
    const css=`
      .gu-gear {
        position:fixed;top:12px;right:12px;
        width:36px;height:36px;
        background:#1b1b25dd;border-radius:50%;
        display:flex;align-items:center;justify-content:center;
        cursor:pointer;z-index:2147483647;
        color:#8cf;font-size:20px;
      }
      .gu-gear:hover { transform:rotate(45deg); }
      .gu-panel {
        position:fixed;top:56px;right:12px;
        width:300px;background:#1b1b25f2;
        padding:12px;border-radius:8px;
        font:13px/1.4 sans-serif;color:#cee;
      }
      .gu-panel hr { border-color:#444; margin:8px 0; }
      .gu-panel .row {
        display:flex;align-items:center;
        justify-content:space-between;
        margin:4px 0;
      }
      .gu-panel .row label { flex:1; margin-right:8px; }
      .gu-panel input[type=number] {
        width:60px;padding:2px 4px;
        background:#111;color:#fee;
        border:1px solid #555;border-radius:4px;
        -moz-appearance:textfield;appearance:none;
      }
      .gu-panel input[type=number]::-webkit-inner-spin-button,
      .gu-panel input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance:none;margin:0;
      }
      .gu-panel button {
        width:100%;margin-top:8px;
        padding:6px 0;
        background:#444;border:none;border-radius:4px;
        color:#eee;cursor:pointer;
      }
    `;

    // HTML
    const html=`
      <div class="gu-gear">‚öôÔ∏è</div>
      <div class="gu-panel" style="display:none">
        <div class="row"><label><input id="gu-enabled" type="checkbox"> Enable All</label></div><hr/>
        <div class="row"><label><input id="gu-ac" type="checkbox"> Auto Collector</label></div>
        <div class="row"><label><input id="gu-sm" type="checkbox"> Shard Multiplier</label></div>
        <div class="row"><label><input id="gu-cb" type="checkbox"> Conveyor Booster</label></div><hr/>
        <div class="row"><label><input id="gu-ka" type="checkbox"> keepAlive</label></div>
        <div class="row"><label><input id="gu-reload" type="checkbox"> autoReload</label></div>
        <div class="row">
          <label for="gu-reload-min">Reload Interval</label>
          <input id="gu-reload-min" type="number" min="1"/> <span>min</span>
        </div><hr/>
        <div class="row">
          <label for="gu-log">Log Every</label>
          <input id="gu-log" type="number" min="0"/> <span>s</span>
        </div>
        <button id="gu-reset">Reset to Defaults</button>
      </div>
    `;
    document.head.insertAdjacentHTML('beforeend',`<style>${css}</style>`);
    document.body.insertAdjacentHTML('beforeend',html);

    const $=s=>document.querySelector(s),
          gear=$('.gu-gear'),
          panel=$('.gu-panel');

    function syncUI(){
      $('#gu-enabled').checked    =cfg.enabled;
      $('#gu-ac').checked         =cfg.autoAC;
      $('#gu-sm').checked         =cfg.autoSM;
      $('#gu-cb').checked         =cfg.autoCB;
      $('#gu-ka').checked         =cfg.keepAlive;
      $('#gu-reload').checked     =cfg.autoReload;
      $('#gu-reload-min').value   =cfg.reloadMinutes;
      $('#gu-log').value          =cfg.logEach;
    }
    syncUI();

    $('#gu-enabled').onchange    =e=>{cfg.enabled     =e.target.checked; save(); startAll();};
    $('#gu-ac').onchange         =e=>{cfg.autoAC      =e.target.checked; save();};
    $('#gu-sm').onchange         =e=>{cfg.autoSM      =e.target.checked; save();};
    $('#gu-cb').onchange         =e=>{cfg.autoCB      =e.target.checked; save();};
    $('#gu-ka').onchange         =e=>{cfg.keepAlive   =e.target.checked; save();};
    $('#gu-reload').onchange     =e=>{cfg.autoReload  =e.target.checked; save();};
    $('#gu-reload-min').onchange =e=>{cfg.reloadMinutes=Math.max(1,~~e.target.value); save();};
    $('#gu-log').onchange        =e=>{cfg.logEach     =Math.max(0,~~e.target.value); save();};
    $('#gu-reset').onclick       =()=>{Object.assign(cfg,DEF); save(); syncUI(); startAll(); console.clear();};

    gear.onclick =()=> panel.style.display = panel.style.display==='none' ? 'block' : 'none';
  }
})();
