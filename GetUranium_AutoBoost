// ==UserScript==
// @name         GetUranium AutoBoost v2 (UI‑edition, 2024‑05 fix)
// @namespace    https://github.com/k2wGG
// @version      2.3
// @description  Автозапуск трёх бустеров + шестерёнка‑GUI + «мягкий» keep‑alive
// @match        https://www.geturanium.io/*
// @run-at       document-idle
// @inject-into  page
// @grant        none
// ==/UserScript==

;(function () {
  'use strict';
  console.info('🚀 AutoBoost v2.3 loaded');

  /*────────── 0. Patched isTrusted (для React) ─────────*/
  if (!Event.prototype.__ab_isTrustedPatched) {
    [Event, MouseEvent].forEach(C =>
      Object.defineProperty(C.prototype, 'isTrusted', {
        get () { return true }, configurable: true
      })
    );
    Event.prototype.__ab_isTrustedPatched = true;
  }

  /*────────── 1. Конфигурация / storage ─────────*/
  const DEF = {
    enabled   : true,
    autoAC    : true,
    autoSM    : true,
    autoCB    : true,
    logEach   : 10,     // c
    keepAlive : true    // <-- можно выключить в UI
  };
  const LS_KEY = 'gu-autoboost';
  const cfg = load();
  const save = () => localStorage.setItem(LS_KEY, JSON.stringify(cfg));

  function load() {
    try { return { ...DEF, ...JSON.parse(localStorage.getItem(LS_KEY)||'{}') } }
    catch { return { ...DEF } }
  }

  /*────────── 2. «Мягкий» keep‑alive ─────────*/
  const PING = '/favicon.ico';   // отдают 200 и никого не триггерят
  const rnd  = (min,max)=>Math.random()*(max-min)+min;

  setInterval(() => {
    if (!cfg.keepAlive) return;
    fetch(PING, { cache:'no-store', mode:'no-cors' }).catch(()=>{});
    /* лёгкое «шевеление» курсора / вкладки */
    document.dispatchEvent(new MouseEvent('mousemove', { bubbles:true }));
    document.dispatchEvent(new Event('visibilitychange'));
  }, rnd(45,70)*1e3);   // 45‑70 с, чтобы не стучать с чётким периодом

  /*────────── 3. Логика бустеров ─────────*/
  const LABEL = {
    autoAC : 'auto collector',
    autoSM : 'shard multiplier',
    autoCB : 'conveyor booster'
  };
  const timers = {}, nextLog = {value:Date.now()};

  const buttons = () => [...document.querySelectorAll('button')];
  const findBtn = f => buttons().find(b => b.innerText.toLowerCase().startsWith(LABEL[f]));

  /** сколько мс осталось до конца кулдауна */
  function getRestMs(btn){
    if (!btn || !btn.disabled) return 0;              // активен
    /* если ещё «Activating…» — ждём 3 с, не спамим сервер */
    if (/activating/i.test(btn.innerText)) return 3_000;

    const m = /(\d+)\s*m.*?(\d+)\s*s/i.exec(btn.innerText);
    return m ? (60*+m[1] + +m[2])*1e3 : 600e3;        // иначе «NN m NN s» или fallback 10 мин
  }

  const simulateClick = el =>
    ['mousedown','mouseup','click'].forEach(t =>
      el.dispatchEvent(new MouseEvent(t,{bubbles:true,cancelable:true,view:window}))
    );

  function schedule(flag){
    clearTimeout(timers[flag]);
    if (!cfg.enabled){ timers[flag]=setTimeout(()=>schedule(flag),3e3); return }

    const btn=findBtn(flag), rest=getRestMs(btn);

    /* кулдауна нет → пробуем клик */
    if (rest===0){
      if (cfg[flag] && btn && !btn.disabled){
        simulateClick(btn);
        log(`⚡ click «${flag}»`);
      }
      timers[flag]=setTimeout(()=>schedule(flag),1e3);
      return;
    }

    log(`⏳ ${flag}: ${Math.round(rest/1e3)} s left`);
    timers[flag]=setTimeout(()=>schedule(flag),rest+1e3);
  }
  const startAll = () => Object.keys(LABEL).forEach(schedule);

  /*────────── 4. Инициализация + перерендеры ─────────*/
  const init = () => {
    if (!findBtn('autoAC')) { requestAnimationFrame(init); return }
    console.info('✅ AutoBoost initialised');
    startAll(); ensureUI();
  };
  document.readyState==='complete'
    ? init()
    : window.addEventListener('load', init, {once:true});

  new MutationObserver(m=>{ if(m.some(x=>x.type==='childList')) startAll() })
      .observe(document.documentElement,{childList:true,subtree:true});

  /*────────── 5. Логирование ─────────*/
  function log(str){
    if(!cfg.logEach) return;
    const now=Date.now();
    if(now>=nextLog.value){
      console.log(`[AutoBoost] ${str}`);
      nextLog.value = now + cfg.logEach*1e3;
    }
  }

  /*────────── 6. Мини‑GUI ─────────*/
  function ensureUI(){
    if (document.querySelector('.gu-gear')) return;

    const css = `
.gu-gear{position:fixed;top:12px;right:12px;width:36px;height:36px;
  background:#1b1b25dd;border-radius:50%;display:flex;align-items:center;
  justify-content:center;cursor:pointer;z-index:2147483647;
  color:#8cf;font-size:20px;user-select:none;transition:transform .3s}
.gu-gear:hover{transform:rotate(60deg)}
.gu-panel{position:fixed;top:56px;right:12px;width:240px;background:#1b1b25f2;
  padding:12px 14px;border-radius:8px;font:13px/1.4 sans-serif;
  color:#cee;box-shadow:0 4px 12px #000b;z-index:2147483647;
  backdrop-filter:blur(4px)}
.gu-panel hr{border-color:#444;margin:6px -14px}
.gu-panel input[type=number]{width:60px;margin-left:4px;background:#111;
  color:#fee;border:1px solid #555;border-radius:4px;padding:2px 4px}
.gu-panel label{display:block;margin:5px 0}
.gu-panel button{margin-top:6px;padding:2px 8px;background:#444;border:0;
  border-radius:4px;color:#eee;cursor:pointer}`;
    const html = `
<div class="gu-gear" title="AutoBoost settings">⚙️</div>
<div class="gu-panel" style="display:none">
  <label><input type="checkbox" id="gu-enabled"> script enabled</label><hr>
  <label><input type="checkbox" id="gu-ac"> Auto Collector</label>
  <label><input type="checkbox" id="gu-sm"> Shard Multiplier</label>
  <label><input type="checkbox" id="gu-cb"> Conveyor Booster</label><hr>
  keep‑alive <input type="checkbox" id="gu-ka"><br>
  log each <input type="number" id="gu-log" min="0" step="1"> s
  <button id="gu-reset">reset</button>
</div>`;

    document.head.insertAdjacentHTML('beforeend', `<style>${css}</style>`);
    document.body.insertAdjacentHTML('beforeend', html);

    const $ = s=>document.querySelector(s),
          gear = $('.gu-gear'),
          pnl  = $('.gu-panel');

    const sync = () => {
      $('#gu-enabled').checked = cfg.enabled;
      $('#gu-ka').checked      = cfg.keepAlive;
      $('#gu-ac').checked      = cfg.autoAC;
      $('#gu-sm').checked      = cfg.autoSM;
      $('#gu-cb').checked      = cfg.autoCB;
      $('#gu-log').value       = cfg.logEach;
    }; sync();

    /* события UI */
    $('#gu-enabled').onchange = e=>{cfg.enabled   = e.target.checked;save();startAll()};
    $('#gu-ka').onchange      = e=>{cfg.keepAlive = e.target.checked;save()};
    $('#gu-ac').onchange      = e=>{cfg.autoAC    = e.target.checked;save()};
    $('#gu-sm').onchange      = e=>{cfg.autoSM    = e.target.checked;save()};
    $('#gu-cb').onchange      = e=>{cfg.autoCB    = e.target.checked;save()};
    $('#gu-log').onchange     = e=>{cfg.logEach   = Math.max(0,~~e.target.value);save()};
    $('#gu-reset').onclick    = ()=>{Object.assign(cfg,DEF);save();sync();startAll();console.clear()};

    const toggle = () => pnl.style.display = pnl.style.display==='none' ? 'block' : 'none';
    gear.onclick = toggle;
    window.addEventListener('keydown',e=>{
      if(e.altKey && e.key.toLowerCase()==='g'){e.preventDefault();toggle()}
    });

    /* если React сотрёт DOM, вернём UI назад */
    new MutationObserver(()=>setTimeout(ensureUI,0))
      .observe(document.body,{childList:true});
  }
})();
