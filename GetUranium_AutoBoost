// ==UserScript==
// @name          GetUranium AutoBoost v2
// @namespace     https://github.com/k2wGG
// @version       2.9.2
// @description   –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—É—Å—Ç–µ—Ä–æ–≤, —Å–±–æ—Ä —Ñ–µ—Ä–º—ã, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π keep-alive, –∞–∫—Ç–∏–≤–∞—Ü–∏—è Refinery –∏ –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞.
// @author        k2wGG
// @match         https://geturanium.io/*
// @match         https://www.geturanium.io/*
// @match         https://geturanium.io/refinery*
// @match         https://www.geturanium.io/refinery*
// @run-at        document-start
// @grant         none
// @inject-into   page
// ==/UserScript==

;(function(){
  'use strict';
  console.info('üöÄ AutoBoost v2.9.2 –∑–∞–≥—Ä—É–∂–µ–Ω. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã.');

  /* ---------------------------------------------------------------
   * 0) –ì–õ–£–ë–û–ö–ò–ï –ü–ê–¢–ß–ò –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –ò–ú–ò–¢–ê–¶–ò–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò –ò –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò
   * ------------------------------------------------------------- */

  if(!Event.prototype.__ab_trusted){
    [Event, MouseEvent, KeyboardEvent, UIEvent].forEach(C=>{
      try {
        Object.defineProperty(C.prototype,'isTrusted',{
          get(){ return true; },
          configurable:true
        });
      } catch (e) {
        console.warn(`[AutoBoost v2] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å Event.isTrusted –¥–ª—è ${C.name}:`, e);
      }
    });
    Event.prototype.__ab_trusted = true;
    console.info('[AutoBoost v2] Event.isTrusted —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω: –≤—Å–µ–≥–¥–∞ true.');
  }

  if (window.requestAnimationFrame && !window.requestAnimationFrame.__ab_patched) {
    const _originalRequestAnimationFrame = window.requestAnimationFrame;
    let lastRafTime = performance.now();
    const RAF_MIN_INTERVAL = 1000 / 60;

    window.requestAnimationFrame = function(callback) {
      const now = performance.now();
      if (document.hidden && (now - lastRafTime >= RAF_MIN_INTERVAL)) {
          lastRafTime = now;
          try {
              callback(now);
          } catch (e) {
              console.error('[AutoBoost v2] –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ RAF –∫–æ–ª–±—ç–∫–∞:', e);
          }
      }
      return _originalRequestAnimationFrame.call(window, callback);
    };
    window.requestAnimationFrame.__ab_patched = true;
    console.info('[AutoBoost v2] requestAnimationFrame –ø—Ä–æ–ø–∞—Ç—á–µ–Ω –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.');
  }

  if (!window.__ab_timers_patched) {
    const MIN_INTERVAL_MS = 4;

    const _originalSetTimeout = window.setTimeout;
    window.setTimeout = function(callback, delay = 0, ...args) {
      return _originalSetTimeout.call(this, callback, Math.max(delay, MIN_INTERVAL_MS), ...args);
    };

    const _originalSetInterval = window.setInterval;
    window.setInterval = function(callback, delay = 0, ...args) {
      return _originalSetInterval.call(this, callback, Math.max(delay, MIN_INTERVAL_MS), ...args);
    };
    window.__ab_timers_patched = true;
    console.info('[AutoBoost v2] setTimeout/setInterval –ø—Ä–æ–ø–∞—Ç—á–µ–Ω—ã –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ç–∞–π–º–∏–Ω–≥–æ–≤.');
  }

  if (document.hasFocus && !document.hasFocus.__ab_patched) {
    const _originalHasFocus = document.hasFocus;
    document.hasFocus = function() {
      return true;
    };
    document.hasFocus.__ab_patched = true;
    console.info('[AutoBoost v2] document.hasFocus() –ø—Ä–æ–ø–∞—Ç—á–µ–Ω: –≤—Å–µ–≥–¥–∞ true.');
  }

  /* ---------------------------------------------------------------
   * 1) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ (localStorage / sessionStorage)
   * ------------------------------------------------------------- */
  const DEF = {
    enabled:         true,
    autoAC:          true,
    autoSM:          true,
    autoCB:          true,
    autoFarm:        true,
    autoRefine:      true,
    keepAlive:       true,
    autoReload:      true,
    reloadMinutes:   50,
    logEach:         10
  };
  const LS_CFG    = 'gu-autoboost-config';
  const LS_STATS = 'gu-autoboost-stats';

  let cfg   = loadConfig();
  let stats = loadStats();

  function loadConfig(){
    try{ return {...DEF, ...JSON.parse(localStorage.getItem(LS_CFG)||'{}')}; }
    catch(e){ console.error('[AutoBoost v2] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:',e); return {...DEF}; }
  }
  function saveConfig(){ localStorage.setItem(LS_CFG, JSON.stringify(cfg)); }

  function loadStats(){
    try{
      return JSON.parse(sessionStorage.getItem(LS_STATS)) || {
        reloadCount: 0,
        clickCount: { autoAC:0, autoSM:0, autoCB:0, autoFarm:0, autoRefine:0 }
      };
    }catch(e){
      console.error('[AutoBoost v2] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',e);
      return { reloadCount: 0, clickCount:{autoAC:0,autoSM:0,autoCB:0,autoFarm:0,autoRefine:0} };
    }
  }
  function saveStats(){ sessionStorage.setItem(LS_STATS, JSON.stringify(stats)); }

  const rnd = (min,max)=> min + Math.random()*(max-min)|0;

  /* ---------------------------------------------------------------
   * 2) Soft Keep-Alive ‚Äî –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
   * ------------------------------------------------------------- */
  setInterval(()=>{
    if(!cfg.keepAlive) return;

    fetch('/favicon.ico',{cache:'no-store',mode:'no-cors'}).catch(()=>{});

    const body = document.body;
    if (body) {
      const rect = body.getBoundingClientRect();
      const x = rect.left + Math.random()*rect.width;
      const y = rect.top  + Math.random()*rect.height;

      ['mousemove', 'mousedown', 'mouseup', 'click', 'pointermove', 'pointerdown', 'pointerup'].forEach(type => {
        body.dispatchEvent(new MouseEvent(type, {
          bubbles:true, cancelable:true, view:window,
          button:0, buttons:(type==='mousedown'||type==='pointerdown')?1:0,
          clientX:x, clientY:y
        }));
      });
    }

    window.scrollBy(0, rnd(-1,1));

    document.dispatchEvent(new KeyboardEvent('keydown',{key:' ',code:'Space',bubbles:true}));
    document.dispatchEvent(new KeyboardEvent('keyup'  ,{key:' ',code:'Space',bubbles:true}));

    document.dispatchEvent(new Event('focus', {bubbles:true}));
    document.dispatchEvent(new Event('blur', {bubbles:true}));

  }, rnd(90,120)*1000);

  /* ---------------------------------------------------------------
   * 3) –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 429 / 403
   * ------------------------------------------------------------- */
  let backoffUntil = 0;
  const nativeFetch = window.fetch.bind(window);
  window.fetch = async (...args) => {
    try {
      const res = await nativeFetch(...args);
      if(res.status===429){
        backoffUntil = Date.now()+5*60*1000;
        console.warn('[AutoBoost v2] –û–±–Ω–∞—Ä—É–∂–µ–Ω 429 (Too Many Requests) ‚Üí —Å—Ç–∞–≤–∏–º –ø–∞—É–∑—É 5 –º–∏–Ω.');
      }
      if(res.status===403){
        console.warn('[AutoBoost v2] –û–±–Ω–∞—Ä—É–∂–µ–Ω 403 (Forbidden) ‚Üí –≤—ã–ø–æ–ª–Ω—è–µ–º –∂—ë—Å—Ç–∫—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É.');
        hardReload();
      }
      return res;
    } catch (error) {
      console.error('[AutoBoost v2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fetch –∑–∞–ø—Ä–æ—Å–∞:', error);
      throw error;
    }
  };

  /* ---------------------------------------------------------------
   * 4) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫ –±—É—Å—Ç–µ—Ä–æ–≤ + —Å–±–æ—Ä —Ñ–µ—Ä–º—ã + Refinery
   * ------------------------------------------------------------- */
  const LABELS = {
    autoAC:     'auto collector',
    autoSM:     'shard multiplier',
    autoCB:     'conveyor booster',
    autoFarm:   'farm reward',
    autoRefine: 'start refining'
  };
  const timers    = {};
  const lastClick = {};
  const nextLog   = { value: Date.now() };

  function findBtn(text){
    return [...document.querySelectorAll('button')]
      .find(b => b.innerText.toLowerCase().startsWith(text.toLowerCase()));
  }

  function getCooldown(btn){
    if(!btn || btn.disabled===false) return 0;
    if(/activating/i.test(btn.innerText)) return 3000;
    const m = /(\d+)\s*m.*?(\d+)\s*s/i.exec(btn.innerText);
    if(m) return (60*+m[1] + +m[2])*1000;
    const s = /(\d+)\s*s/i.exec(btn.innerText);
    if(s) return (+s[1])*1000;
    return 600000;
  }

  function doClick(el){
    if(!el) {
      console.warn('[AutoBoost v2] –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.');
      return;
    }
    const rect = el.getBoundingClientRect();
    if(!rect.width||!rect.height) {
      console.warn('[AutoBoost v2] –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ–≤–∏–¥–∏–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É (–Ω—É–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞).');
      return;
    }
    const x = rect.left + Math.random()*rect.width;
    const y = rect.top  + Math.random()*rect.height;

    ['mousedown','mouseup','click'].forEach(type=>
      el.dispatchEvent(new MouseEvent(type,{
        bubbles:true,
        cancelable:true,
        view:window,
        button:0,
        buttons:type==='mousedown'?1:0,
        clientX:x,clientY:y
      }))
    );
  }

  function schedule(key){
    clearTimeout(timers[key]);

    if(Date.now()<backoffUntil){
      timers[key] = setTimeout(()=>schedule(key), backoffUntil-Date.now()+1000);
      return;
    }
    if(!cfg.enabled){
      timers[key] = setTimeout(()=>schedule(key), 3000);
      return;
    }

    const btn = findBtn(LABELS[key]);
    const cd  = getCooldown(btn);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è autoRefine
    if (key === 'autoRefine') {
      // *** –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–†–û–í–ï–†–¨–¢–ï –≠–¢–û–¢ –°–ï–õ–ï–ö–¢–û–†! ***
      // –û–Ω –∏—â–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π div, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π "Your Shards" –∏ "Required"
      const refineryInfoContainer = document.querySelector('div.grid.grid-cols-2.gap-4'); // –≠—Ç–æ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Your Shards –∏ Required
      let currentPoints = 0;
      let requiredPoints = 0;

      if (refineryInfoContainer) {
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å "Your Shards" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π div –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç "Your Shards")
        const yourShardsElement = refineryInfoContainer.querySelector('div:first-child .font-mono.text-xl.leading-tight.text-white');
        if (yourShardsElement) {
          currentPoints = parseInt(yourShardsElement.innerText.replace(/[^0-9]/g, '')) || 0;
        }

        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å "Required" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Ç–æ—Ä–æ–π div –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç "Required")
        const requiredShardsElement = refineryInfoContainer.querySelector('div:last-child .font-mono.text-xl.leading-tight.text-white');
        if (requiredShardsElement) {
          requiredPoints = parseInt(requiredShardsElement.innerText.replace(/[^0-9]/g, '')) || 0;
        }
      }

      if (btn && btn.disabled) { // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        if (currentPoints < requiredPoints) {
          log(`Refinery: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞—Ä–¥–æ–≤. –ù—É–∂–Ω–æ ${requiredPoints}, —É –≤–∞—Å ${currentPoints}.`);
          timers[key] = setTimeout(() => schedule(key), 5000 + rnd(0, 5000)); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5-10 —Å–µ–∫—É–Ω–¥
          return;
        }
      }
      if (currentPoints >= requiredPoints && btn && !btn.disabled) {
        // –ï—Å–ª–∏ –ø–æ–∏–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        const since = Date.now() - (lastClick[key] || 0);
        const gap = 5000 + rnd(0, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 5-7 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        if (cfg[key] && since > gap) {
          doClick(btn);
          lastClick[key] = Date.now();
          stats.clickCount[key]++; saveStats(); updateStatsUI();
          log(`‚ö° ${key} –∫–ª–∏–∫–Ω—É—Ç. –®–∞—Ä–¥–æ–≤: ${currentPoints}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredPoints}.`);
          // –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 15-20 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –¥–∞—Ç—å UI –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
          timers[key] = setTimeout(() => schedule(key), 15000 + rnd(0, 5000));
          return;
        }
      } else {
        // –ï—Å–ª–∏ –ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ
        log(`Refinery: –ö–Ω–æ–ø–∫–∞ "${LABELS[key]}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç. –®–∞—Ä–¥–æ–≤: ${currentPoints}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredPoints}.`);
        timers[key] = setTimeout(() => schedule(key), 5000 + rnd(0, 5000)); // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5-10 —Å–µ–∫—É–Ω–¥
        return;
      }
    }


    if(cd===0){
      const since = Date.now()-(lastClick[key]||0);
      const gap¬† ¬†= 8000 + rnd(0,2000);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è autoFarm: —Å–±–æ—Ä —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤
      if (key === 'autoFarm') {
          const eightHoursMs = 8 * 60 * 60 * 1000;
          const farmGracePeriod = 5 * 60 * 1000;
          const nextFarmTime = (lastClick[key] || 0) + eightHoursMs;

          if (Date.now() < nextFarmTime) {
              const remaining = nextFarmTime - Date.now();
              log(`‚è≥ ${key}: —Å–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ ${Math.round(remaining / 1000 / 60)} –º–∏–Ω.`);
              timers[key] = setTimeout(() => schedule(key), remaining + rnd(0, farmGracePeriod));
              return;
          }
      }


      if(cfg[key] && btn && !btn.disabled && since>gap){
        doClick(btn);
        lastClick[key] = Date.now();
        stats.clickCount[key]++; saveStats(); updateStatsUI();
        log(`‚ö° ${key} –∫–ª–∏–∫–Ω—É—Ç.`);
      }
      timers[key] = setTimeout(()=>schedule(key),1000);
    }else{
      const delay = cd + 1000 + rnd(0,1500);
      log(`‚è≥ ${key}: —Å–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ ${Math.round(cd/1000)} —Å.`);
      timers[key] = setTimeout(()=>schedule(key), delay);
    }
  }

  function startAll(){
    Object.keys(LABELS).forEach(key => schedule(key));
  }

  /* ---------------------------------------------------------------
   * 5) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏
   * ------------------------------------------------------------- */
  let reloadTimer = null;
  function scheduleReload(){
    clearTimeout(reloadTimer);
    if(!cfg.autoReload) return;
    const ms = cfg.reloadMinutes*60*1000;
    console.info(`[AutoBoost v2] –°–ª–µ–¥—É—é—â–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ ${cfg.reloadMinutes} –º–∏–Ω.`);
    reloadTimer = setTimeout(()=>{
      stats.reloadCount++; saveStats(); updateStatsUI();
      hardReload();
    }, ms);
  }
  function hardReload(){
    location.replace(location.pathname+'?_='+Date.now());
  }

  /* ---------------------------------------------------------------
   * 6) Keep-alive –¥–ª—è Vercel (–ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ edge-—Ñ—É–Ω–∫—Ü–∏–π)
   * ------------------------------------------------------------- */
  function scheduleVercel(){
    if(!cfg.keepAlive) return;
    const ms = rnd(50,55)*60*1000;
    console.info(`[AutoBoost v2] –ü–∏–Ω–≥ Vercel —á–µ—Ä–µ–∑ ‚âà${Math.round(ms/60000)} –º–∏–Ω.`);
    setTimeout(()=>{
      const f=document.createElement('iframe');
      f.style.display='none'; f.src='/';
      document.body.append(f);
      setTimeout(()=>f.remove(),15000);
      scheduleVercel();
    }, ms);
  }

  /* ---------------------------------------------------------------
   * 8) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
   * ------------------------------------------------------------- */
  function init(){
    const isRefineryPage = window.location.pathname.includes('/refinery');

    let buttonsToCheck = [];
    if (isRefineryPage) {
      buttonsToCheck = [LABELS.autoRefine];
    } else {
      buttonsToCheck = [LABELS.autoAC, LABELS.autoSM, LABELS.autoCB, LABELS.autoFarm];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ –Ω—É–∂–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    const relevantButtonFound = buttonsToCheck.some(label => findBtn(label));

    if (!relevantButtonFound) {
      requestAnimationFrame(init);
      return;
    }

    console.info('‚úÖ AutoBoost v2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
    startAll();
    scheduleReload();
    scheduleVercel();
  }

  /* ---------------------------------------------------------------
   * 9) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã
   * ------------------------------------------------------------- */
  function log(msg){
    if(!cfg.logEach) return;
    const now = Date.now();
    if(now >= nextLog.value){
      console.log(`[AutoBoost v2] ${msg}`);
      nextLog.value = now + cfg.logEach*1000;
    }
  }

  /* ---------------------------------------------------------------
   * 10) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (UI) + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   * ------------------------------------------------------------- */
  let updateStatsUI = ()=>{};
  function renderUI(){
    if(document.querySelector('.gu-gear')) return;

    const css = `
      .gu-gear{
        position:fixed;top:12px;right:12px;width:36px;height:36px;
        background:#1b1b25dd;border-radius:50%;display:flex;
        align-items:center;justify-content:center;cursor:pointer;
        z-index:9999;color:#8cf;font-size:20px;user-select:none;
        transition:transform .2s ease-in-out;}
      .gu-gear:hover{transform:rotate(45deg)}
      .gu-panel{
        position:fixed;top:56px;right:12px;width:340px;background:#1b1b25f2;
        padding:12px;border-radius:8px;font:13px/1.4 sans-serif;color:#cee;
        box-shadow:0 4px 8px rgba(0,0,0,.3);z-index:9998;}
      .gu-panel hr{border-color:#444;margin:8px 0}
      .gu-panel .row{display:flex;align-items:center;justify-content:space-between;margin:4px 0}
      .gu-panel .row label{flex:1;margin-right:8px;cursor:pointer}
      .gu-panel input[type=checkbox]{margin-right:5px;}
      .gu-panel input[type=number]{width:60px;padding:3px 5px;background:#111;color:#fee;
        border:1px solid #555;border-radius:4px;text-align:center;}
      .gu-panel button{width:100%;margin-top:8px;padding:6px 0;background:#444;border:none;
        border-radius:4px;color:#eee;cursor:pointer;transition:background-color .2s}
      .gu-panel button:hover{background:#555}
      .stat-value{font-weight:bold;color:#4caf50}`;

    const html = `
      <div class="gu-gear">‚öôÔ∏è</div>
      <div class="gu-panel" style="display:none">
        <div class="row"><label><input id="gu-enabled" type="checkbox"> –í–∫–ª—é—á–∏—Ç—å –≤—Å—ë (Master Switch)</label></div><hr/>
        <div class="row"><label><input id="gu-ac" type="checkbox"> Auto Collector</label></div>
        <div class="row"><label><input id="gu-sm" type="checkbox"> Shard Multiplier</label></div>
        <div class="row"><label><input id="gu-cb" type="checkbox"> Conveyor Booster</label></div><hr/>
        <div class="row"><label><input id="gu-farm" type="checkbox"> Auto Farm (8 —á)</label></div>
        <div class="row"><label><input id="gu-refine" type="checkbox"> Auto Refinery</label></div><hr/>
        <div class="row"><label><input id="gu-ka" type="checkbox"> Keep-Alive (–∞–Ω—Ç–∏-AFK)</label></div>
        <div class="row"><label><input id="gu-reload" type="checkbox"> –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞</label></div>
        <div class="row"><label>–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)</label><input id="gu-reload-min" type="number" min="1"></div><hr/>
        <div class="row"><label>–õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∂–¥—ã–µ (—Å)</label><input id="gu-log" type="number" min="0"></div><hr/>
        <div class="row"><label>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫:</label><div id="st-rel" class="stat-value">0</div></div>
        <div class="row"><label>Collector –∫–ª–∏–∫–æ–≤:</label><div id="st-ac" class="stat-value">0</div></div>
        <div class="row"><label>Shard –∫–ª–∏–∫–æ–≤:</label><div id="st-sm" class="stat-value">0</div></div>
        <div class="row"><label>Booster –∫–ª–∏–∫–æ–≤:</label><div id="st-cb" class="stat-value">0</div></div>
        <div class="row"><label>Farm –∫–ª–∏–∫–æ–≤:</label><div id="st-farm" class="stat-value">0</div></div>
        <div class="row"><label>Refinery –∫–ª–∏–∫–æ–≤:</label><div id="st-refine" class="stat-value">0</div></div><hr/>
        <button id="gu-reset">–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
      </div>`;

    document.head.insertAdjacentHTML('beforeend',`<style>${css}</style>`);
    document.body.insertAdjacentHTML('beforeend',html);

    const $ = s=>document.querySelector(s);
    const gear  = $('.gu-gear');
    const panel = $('.gu-panel');

    updateStatsUI = ()=>{
      $('#st-rel').textContent¬† = stats.reloadCount;
      $('#st-ac').textContent¬† ¬†= stats.clickCount.autoAC;
      $('#st-sm').textContent¬† ¬†= stats.clickCount.autoSM;
      $('#st-cb').textContent¬† ¬†= stats.clickCount.autoCB;
      $('#st-farm').textContent = stats.clickCount.autoFarm;
      $('#st-refine').textContent = stats.clickCount.autoRefine;
    };

    function syncUI(){
      $('#gu-enabled').checked¬† ¬† ¬† = cfg.enabled;
      $('#gu-ac').checked¬† ¬† ¬† ¬† ¬† ¬†= cfg.autoAC;
      $('#gu-sm').checked¬† ¬† ¬† ¬† ¬† ¬†= cfg.autoSM;
      $('#gu-cb').checked¬† ¬† ¬† ¬† ¬† ¬†= cfg.autoCB;
      $('#gu-farm').checked¬† ¬† ¬† ¬† ¬†= cfg.autoFarm;
      $('#gu-refine').checked       = cfg.autoRefine;
      $('#gu-ka').checked¬† ¬† ¬† ¬† ¬† ¬†= cfg.keepAlive;
      $('#gu-reload').checked¬† ¬† ¬† ¬†= cfg.autoReload;
      $('#gu-reload-min').value¬† ¬† ¬†= cfg.reloadMinutes;
      $('#gu-log').value¬† ¬† ¬† ¬† ¬† ¬† = cfg.logEach;
      updateStatsUI();
    }
    syncUI();

    $('#gu-enabled').onchange¬† ¬† ¬†= e=>{ cfg.enabled¬† ¬† ¬† ¬†= e.target.checked; saveConfig(); startAll(); };
    $('#gu-ac').onchange¬† ¬† ¬† ¬† ¬† = e=>{ cfg.autoAC¬† ¬† ¬† ¬† = e.target.checked; saveConfig(); };
    $('#gu-sm').onchange¬† ¬† ¬† ¬† ¬† = e=>{ cfg.autoSM¬† ¬† ¬† ¬† = e.target.checked; saveConfig(); };
    $('#gu-cb').onchange¬† ¬† ¬† ¬† ¬† = e=>{ cfg.autoCB¬† ¬† ¬† ¬† = e.target.checked; saveConfig(); };
    $('#gu-farm').onchange¬† ¬† ¬† ¬† = e=>{ cfg.autoFarm¬† ¬† ¬† = e.target.checked; saveConfig(); schedule('autoFarm'); };
    $('#gu-refine').onchange¬† ¬† ¬† = e=>{ cfg.autoRefine¬† ¬† = e.target.checked; saveConfig(); schedule('autoRefine'); };
    $('#gu-ka').onchange¬† ¬† ¬† ¬† ¬† = e=>{ cfg.keepAlive¬† ¬† ¬†= e.target.checked; saveConfig(); };
    $('#gu-reload').onchange¬† ¬† ¬† = e=>{ cfg.autoReload¬† ¬† = e.target.checked; saveConfig(); scheduleReload(); };
    $('#gu-reload-min').onchange¬† = e=>{ cfg.reloadMinutes = Math.max(1,~~e.target.value); saveConfig(); scheduleReload(); };
    $('#gu-log').onchange¬† ¬† ¬† ¬† ¬†= e=>{ cfg.logEach¬† ¬† ¬† ¬†= Math.max(0,~~e.target.value); saveConfig(); };

    $('#gu-reset').onclick = ()=>{
      Object.assign(cfg,DEF);
      stats = { reloadCount:0, clickCount:{autoAC:0,autoSM:0,autoCB:0,autoFarm:0,autoRefine:0} };
      saveConfig(); saveStats(); syncUI(); startAll(); console.clear();
      console.info('[AutoBoost v2] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω—ã.');
    };

    gear.onclick = () => {
      panel.style.display = panel.style.display==='none' ? 'block' : 'none';
    };
  }

  /* ---------------------------------------------------------------
   * 11) –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è <body>
   * ------------------------------------------------------------- */
  const waitBody = fn => document.body ? fn() : setTimeout(()=>waitBody(fn),50);
  waitBody(renderUI);

  setInterval(()=> !document.querySelector('.gu-gear') && renderUI(), 10000);

  /* ---------------------------------------------------------------
   * 12) –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
   * ------------------------------------------------------------- */
  if(document.readyState==='complete' || document.readyState==='interactive') init();
  else window.addEventListener('DOMContentLoaded', init, { once:true });

  new MutationObserver(m=> m.some(x=>x.type==='childList') && startAll())
    .observe(document.documentElement,{childList:true,subtree:true});

})();
