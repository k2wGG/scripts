// ==UserScript==
// @name         GetUranium AutoBoost v2
// @namespace    https://github.com/k2wGG
// @version      2.7
// @description  –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±—É—Å—Ç–µ—Ä–æ–≤
// @match        https://www.geturanium.io/*
// @run-at       document-idle
// @inject-into  page
// @grant        none
// ==/UserScript==

;(function(){
  'use strict';
  console.info('üöÄ AutoBoost v2.7 loaded');

  // 0) React isTrusted patch
  if(!Event.prototype.__ab_trusted){
    [Event, MouseEvent].forEach(C=>{
      Object.defineProperty(C.prototype,'isTrusted',{
        get(){ return true; },
        configurable: true
      });
    });
    Event.prototype.__ab_trusted = true;
  }

  // 1) Config + storage
  const DEF = {
    enabled:       true,
    autoAC:        true,
    autoSM:        true,
    autoCB:        true,
    autoFarm:      true,        // ‚Üê –Ω–æ–≤—ã–π —Ñ–ª–∞–≥
    keepAlive:     true,
    autoReload:    true,
    reloadMinutes: 50,
    logEach:       10
  };
  const LS_CFG   = 'gu-autoboost-config';
  const LS_STATS = 'gu-autoboost-stats';
  let cfg   = loadConfig();
  let stats = loadStats();

  function loadConfig(){
    try{ return {...DEF, ...JSON.parse(localStorage.getItem(LS_CFG)||'{}')}; }
    catch{ return {...DEF}; }
  }
  function saveConfig(){
    localStorage.setItem(LS_CFG, JSON.stringify(cfg));
  }
  function loadStats(){
    try{
      return JSON.parse(sessionStorage.getItem(LS_STATS)) || {
        reloadCount: 0,
        clickCount: { autoAC:0, autoSM:0, autoCB:0 }
      };
    }catch{
      return { reloadCount: 0, clickCount: { autoAC:0, autoSM:0, autoCB:0 } };
    }
  }
  function saveStats(){
    sessionStorage.setItem(LS_STATS, JSON.stringify(stats));
  }

  // helper rnd
  const rnd = (min,max)=> min + Math.random()*(max-min)|0;

  // 2) Soft keep-alive
  setInterval(()=>{
    if(!cfg.keepAlive) return;
    fetch('/favicon.ico',{cache:'no-store',mode:'no-cors'}).catch(()=>{});
    document.dispatchEvent(new MouseEvent('mousemove',{bubbles:true}));
    document.dispatchEvent(new Event('visibilitychange'));
  }, rnd(90,120)*1000);

  // 3) Proxy fetch for 429 & 403
  let backoffUntil = 0;
  const _fetch = window.fetch.bind(window);
  window.fetch = (...args) => _fetch(...args).then(res=>{
    if(res.status===429){
      backoffUntil = Date.now() + 5*60*1000;
      console.warn('[AutoBoost] 429 ‚Üí pause clicks 5m');
    }
    if(res.status===403){
      console.warn('[AutoBoost] 403 ‚Üí hard reload');
      hardReload();
    }
    return res;
  });

  // 4) Auto-click boosters
  const LABELS = {
    autoAC: 'auto collector',
    autoSM: 'shard multiplier',
    autoCB: 'conveyor booster'
  };
  const timers = {}, lastClick = {}, nextLog = { value: Date.now() };

  function findBtn(key){
    return Array.from(document.querySelectorAll('button'))
      .find(b => b.innerText.toLowerCase().startsWith(LABELS[key]));
  }
  function getCooldown(btn){
    if(!btn||!btn.disabled) return 0;
    if(/activating/i.test(btn.innerText)) return 3000;
    const m = /(\d+)\s*m.*?(\d+)\s*s/i.exec(btn.innerText);
    return m? (60*+m[1] + +m[2])*1000 : 600000;
  }
  function doClick(el){
    ['mousedown','mouseup','click'].forEach(t=>
      el.dispatchEvent(new MouseEvent(t,{bubbles:true,cancelable:true,view:window}))
    );
  }
  function schedule(key){
    clearTimeout(timers[key]);
    if(Date.now()<backoffUntil){
      timers[key] = setTimeout(()=>schedule(key), backoffUntil - Date.now() + 1000);
      return;
    }
    if(!cfg.enabled){
      timers[key] = setTimeout(()=>schedule(key), 3000);
      return;
    }
    const btn = findBtn(key), cd = getCooldown(btn);
    if(cd===0){
      const since = Date.now() - (lastClick[key]||0),
            gap   = 8000 + rnd(0,2000);
      if(cfg[key] && btn && !btn.disabled && since>gap){
        doClick(btn);
        lastClick[key] = Date.now();
        stats.clickCount[key]++; saveStats(); updateStatsUI();
        log(`‚ö° ${key}`);
      }
      timers[key] = setTimeout(()=>schedule(key),1000);
    } else {
      const delay = cd + 1000 + rnd(0,1500);
      log(`‚è≥ ${key}: ${Math.round(cd/1000)}s`);
      timers[key] = setTimeout(()=>schedule(key), delay);
    }
  }
  function startAll(){ Object.keys(LABELS).forEach(schedule); }

  // 5) Auto-reload
  let reloadTimer = null;
  function scheduleReload(){
    if(reloadTimer) clearTimeout(reloadTimer);
    if(!cfg.autoReload) return;
    const ms = cfg.reloadMinutes * 60 * 1000;
    console.info(`[AutoBoost] reload in ${cfg.reloadMinutes}m`);
    reloadTimer = setTimeout(()=>{
      stats.reloadCount++; saveStats(); updateStatsUI();
      hardReload();
    }, ms);
  }
  function hardReload(){
    const url = location.pathname + '?_=' + Date.now();
    location.replace(url);
  }

  // 6) Vercel keep-alive
  function scheduleVercel(){
    if(!cfg.keepAlive) return;
    const ms = rnd(50,55)*60*1000;
    console.info(`[AutoBoost] Vercel keepalive in ‚âà${Math.round(ms/60000)}m`);
    setTimeout(()=>{
      const f = document.createElement('iframe');
      f.style.display='none'; f.src='/';
      document.body.append(f);
      setTimeout(()=>f.remove(),15000);
      scheduleVercel();
    }, ms);
  }

  // 7) Farm reward every 8 hours (toggleable)
  let farmTimer = null;
  function doFarm(){
    const farmBtn = document.querySelector('button.farm-reward');
    if(farmBtn && !farmBtn.disabled){
      console.info('üåæ Farm reward');
      doClick(farmBtn);
    }
  }
  function scheduleFarm(){
    if(farmTimer) clearInterval(farmTimer);
    if(!cfg.autoFarm) return;
    farmTimer = setInterval(doFarm, 8*60*60*1000);
    // –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:
    doFarm();
  }

  // 8) Init
  function init(){
    if(!findBtn('autoAC')){
      requestAnimationFrame(init);
      return;
    }
    console.info('‚úÖ AutoBoost init');
    startAll();
    renderUI();
    scheduleReload();
    scheduleVercel();
    scheduleFarm();            // –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∞
  }
  if(document.readyState==='complete') init();
  else window.addEventListener('load', init, { once:true });
  new MutationObserver(m=> m.some(x=>x.type==='childList') && startAll())
    .observe(document.documentElement,{childList:true,subtree:true});

  // 9) Logging
  function log(msg){
    if(!cfg.logEach) return;
    const now = Date.now();
    if(now >= nextLog.value){
      console.log(`[AutoBoost] ${msg}`);
      nextLog.value = now + cfg.logEach*1000;
    }
  }

  // 10) UI + stats (–¥–æ–±–∞–≤–ª–µ–Ω —á–µ–∫–±–æ–∫—Å –¥–ª—è autoFarm)
  let updateStatsUI = ()=>{};
  function renderUI(){
    if(document.querySelector('.gu-gear')) return;
    const css = `
      .gu-gear{position:fixed;top:12px;right:12px;width:36px;height:36px;
        background:#1b1b25dd;border-radius:50%;display:flex;align-items:center;
        justify-content:center;cursor:pointer;z-index:9999;color:#8cf;font-size:20px;}
      .gu-gear:hover{transform:rotate(45deg);}
      .gu-panel{position:fixed;top:56px;right:12px;width:340px;
        background:#1b1b25f2;padding:12px;border-radius:8px;
        font:13px/1.4 sans-serif;color:#cee;}
      .gu-panel hr{border-color:#444;margin:8px 0;}
      .gu-panel .row{display:flex;align-items:center;
        justify-content:space-between;margin:4px 0;}
      .gu-panel .row label{flex:1;margin-right:8px;}
      .gu-panel input[type=number]{
        width:60px;padding:2px 4px;background:#111;color:#fee;
        border:1px solid #555;border-radius:4px;
        -moz-appearance:textfield;appearance:none;}
      .gu-panel input::-webkit-inner-spin-button,
      .gu-panel input::-webkit-outer-spin-button{
        -webkit-appearance:none;margin:0;}
      .gu-panel button{width:100%;margin-top:8px;padding:6px 0;
        background:#444;border:none;border-radius:4px;color:#eee;cursor:pointer;}
      .stat-value{font-weight:bold;}
    `;
    const html = `
      <div class="gu-gear">‚öôÔ∏è</div>
      <div class="gu-panel" style="display:none">
        <div class="row"><label><input id="gu-enabled" type="checkbox"> Enable All</label></div><hr/>
        <div class="row"><label><input id="gu-ac" type="checkbox"> Auto Collector</label></div>
        <div class="row"><label><input id="gu-sm" type="checkbox"> Shard Multiplier</label></div>
        <div class="row"><label><input id="gu-cb" type="checkbox"> Conveyor Booster</label></div><hr/>
        <div class="row"><label><input id="gu-farm" type="checkbox"> Auto Farm (8h)</label></div><hr/>
        <div class="row"><label><input id="gu-ka" type="checkbox"> keepAlive</label></div>
        <div class="row"><label><input id="gu-reload" type="checkbox"> autoReload</label></div>
        <div class="row">
          <label for="gu-reload-min">Reload Interval (min)</label>
          <input id="gu-reload-min" type="number" min="1"/>
        </div><hr/>
        <div class="row">
          <label for="gu-log">Log Every (s)</label>
          <input id="gu-log" type="number" min="0"/>
        </div><hr/>
        <div class="row"><label>Reload Count</label><div id="stat-reloads" class="stat-value">0</div></div>
        <div class="row"><label>Collector Clicks</label><div id="stat-autoAC"  class="stat-value">0</div></div>
        <div class="row"><label>Shard Clicks</label><div id="stat-autoSM" class="stat-value">0</div></div>
        <div class="row"><label>Booster Clicks</label><div id="stat-autoCB" class="stat-value">0</div></div><hr/>
        <button id="gu-reset">Reset to Defaults</button>
      </div>
    `;
    document.head.insertAdjacentHTML('beforeend',`<style>${css}</style>`);
    document.body.insertAdjacentHTML('beforeend',html);

    const $     = s=>document.querySelector(s),
          gear  = $('.gu-gear'),
          panel = $('.gu-panel');

    updateStatsUI = ()=>{
      $('#stat-reloads').textContent = stats.reloadCount;
      $('#stat-autoAC').textContent   = stats.clickCount.autoAC;
      $('#stat-autoSM').textContent   = stats.clickCount.autoSM;
      $('#stat-autoCB').textContent   = stats.clickCount.autoCB;
    };

    function syncUI(){
      $('#gu-enabled').checked     = cfg.enabled;
      $('#gu-ac').checked          = cfg.autoAC;
      $('#gu-sm').checked          = cfg.autoSM;
      $('#gu-cb').checked          = cfg.autoCB;
      $('#gu-farm').checked        = cfg.autoFarm;
      $('#gu-ka').checked          = cfg.keepAlive;
      $('#gu-reload').checked      = cfg.autoReload;
      $('#gu-reload-min').value    = cfg.reloadMinutes;
      $('#gu-log').value           = cfg.logEach;
      updateStatsUI();
    }
    syncUI();

    $('#gu-enabled').onchange     = e=>{ cfg.enabled      = e.target.checked; saveConfig(); startAll(); };
    $('#gu-ac').onchange          = e=>{ cfg.autoAC       = e.target.checked; saveConfig(); };
    $('#gu-sm').onchange          = e=>{ cfg.autoSM       = e.target.checked; saveConfig(); };
    $('#gu-cb').onchange          = e=>{ cfg.autoCB       = e.target.checked; saveConfig(); };
    $('#gu-farm').onchange        = e=>{ cfg.autoFarm     = e.target.checked; saveConfig(); scheduleFarm(); };
    $('#gu-ka').onchange          = e=>{ cfg.keepAlive    = e.target.checked; saveConfig(); };
    $('#gu-reload').onchange      = e=>{ cfg.autoReload   = e.target.checked; saveConfig(); scheduleReload(); };
    $('#gu-reload-min').onchange  = e=>{ cfg.reloadMinutes= Math.max(1,~~e.target.value); saveConfig(); scheduleReload(); };
    $('#gu-log').onchange         = e=>{ cfg.logEach      = Math.max(0,~~e.target.value); saveConfig(); };
    $('#gu-reset').onclick        = ()=>{
      Object.assign(cfg,DEF);
      stats = { reloadCount:0, clickCount:{autoAC:0,autoSM:0,autoCB:0} };
      saveConfig(); saveStats();
      syncUI(); startAll(); scheduleFarm(); console.clear();
    };

    gear.onclick = ()=> panel.style.display = panel.style.display==='none'?'block':'none';
  }

})();
