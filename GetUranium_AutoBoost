// ==UserScript==
// @name         GetUranium AutoBoost v2
// @namespace    https://github.com/k2wGG
// @version      2.8
// @description  –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±—É—Å—Ç–µ—Ä–æ–≤ –∏ —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥
// @match        https://www.geturanium.io/*
// @run-at       document-idle
// @inject-into  page
// @grant        none
// ==/UserScript==

;(function(){
  'use strict';
  console.info('üöÄ AutoBoost v2.8 loaded');

  // 0) React isTrusted patch - –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  // Puppeteer —É–∂–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ —á–µ—Ä–µ–∑ page.evaluateOnNewDocument, –∑–¥–µ—Å—å –¥–ª—è Tampermonkey.
  if(!Event.prototype.__ab_trusted){
    [Event, MouseEvent].forEach(C=>{
      Object.defineProperty(C.prototype,'isTrusted',{
        get(){ return true; },
        configurable: true
      });
    });
    Event.prototype.__ab_trusted = true;
  }

  // 1) Config + storage
  const DEF = {
    enabled:         true,
    autoAC:          true,
    autoSM:          true,
    autoCB:          true,
    autoFarm:        true,
    keepAlive:       true,
    autoReload:      true,
    reloadMinutes:   50,
    logEach:         10
  };
  const LS_CFG   = 'gu-autoboost-config';
  const LS_STATS = 'gu-autoboost-stats';
  let cfg   = loadConfig();
  let stats = loadStats();

  function loadConfig(){
    try{ return {...DEF, ...JSON.parse(localStorage.getItem(LS_CFG)||'{}')}; }
    catch(e){
      console.error('[AutoBoost] Failed to load config, using defaults:', e);
      return {...DEF};
    }
  }
  function saveConfig(){
    localStorage.setItem(LS_CFG, JSON.stringify(cfg));
  }
  function loadStats(){
    try{
      return JSON.parse(sessionStorage.getItem(LS_STATS)) || {
        reloadCount: 0,
        clickCount: { autoAC:0, autoSM:0, autoCB:0, autoFarm:0 } // –î–æ–±–∞–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞—Ä–º–∞
      };
    }catch(e){
      console.error('[AutoBoost] Failed to load stats, using defaults:', e);
      return { reloadCount: 0, clickCount: { autoAC:0, autoSM:0, autoCB:0, autoFarm:0 } };
    }
  }
  function saveStats(){
    sessionStorage.setItem(LS_STATS, JSON.stringify(stats));
  }

  // helper rnd
  const rnd = (min,max)=> min + Math.random()*(max-min)|0;

  // 2) Soft keep-alive
  setInterval(()=>{
    if(!cfg.keepAlive) return;
    fetch('/favicon.ico',{cache:'no-store',mode:'no-cors'}).catch(()=>{});
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    document.dispatchEvent(new MouseEvent('mousemove',{bubbles:true}));
    document.dispatchEvent(new Event('visibilitychange'));
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–ª—É—á–∞–π–Ω–∞—è –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞)
    window.scrollBy(0, rnd(-1, 1)); // –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞ +/- 1 –ø–∏–∫—Å–µ–ª—å
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞)
    document.dispatchEvent(new KeyboardEvent('keydown', { key: ' ', code: 'Space', bubbles: true }));
    document.dispatchEvent(new KeyboardEvent('keyup', { key: ' ', code: 'Space', bubbles: true }));

  }, rnd(90,120)*1000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —É–º–µ–Ω—å—à–µ–Ω, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ"

  // 3) Proxy fetch for 429 & 403
  let backoffUntil = 0;
  const _fetch = window.fetch.bind(window);
  window.fetch = async (...args) => { // –°–¥–µ–ª–∞–µ–º fetch –ø—Ä–æ–∫—Å–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
    const res = await _fetch(...args);
    if(res.status===429){
      backoffUntil = Date.now() + 5*60*1000;
      console.warn('[AutoBoost] 429 Too Many Requests ‚Üí pause clicks 5m');
    }
    if(res.status===403){
      console.warn('[AutoBoost] 403 Forbidden ‚Üí hard reload');
      hardReload();
    }
    return res;
  };

  // 4) Auto-click boosters
  const LABELS = {
    autoAC: 'auto collector',
    autoSM: 'shard multiplier',
    autoCB: 'conveyor booster',
    autoFarm: 'farm reward' // –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ñ–µ—Ä–º—ã
  };
  const timers = {}, lastClick = {}, nextLog = { value: Date.now() };

  function findBtn(text){
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    return Array.from(document.querySelectorAll('button'))
      .find(b => b.innerText.toLowerCase().startsWith(text.toLowerCase()));
  }
  function getCooldown(btn){
    if(!btn||btn.disabled === false) return 0; // –ö–Ω–æ–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    if(/activating/i.test(btn.innerText)) return 3000; // –°–æ—Å—Ç–æ—è–Ω–∏–µ "activating"
    const m = /(\d+)\s*m.*?(\d+)\s*s/i.exec(btn.innerText);
    if(m) return (60*+m[1] + +m[2]) * 1000;
    const s = /(\d+)\s*s/i.exec(btn.innerText); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–∫—É–Ω–¥—ã
    if(s) return (+s[1]) * 1000;
    return 600000; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –º–∏–Ω—É—Ç)
  }

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è doClick —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  function doClick(el){
    if (!el) {
      console.warn('[AutoBoost] doClick: Element is null or undefined. Skipping click.');
      return;
    }

    const rect = el.getBoundingClientRect();
    if (rect.width === 0 || rect.height === 0) {
      console.warn('[AutoBoost] doClick: Element has no visible area or is detached. Skipping click.');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–∫–∞
    const clientX = rect.left + Math.random() * rect.width;
    const clientY = rect.top + Math.random() * rect.height;

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
    ['mousedown','mouseup','click'].forEach(type =>
      el.dispatchEvent(new MouseEvent(type,{
        bubbles: true,
        cancelable: true,
        view: window,
        button: 0, // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
        buttons: type === 'mousedown' ? 1 : 0, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è mousedown
        clientX: clientX,
        clientY: clientY,
        isTrusted: true // –í–∞—à –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–∞—Ç—á —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ
      }))
    );
  }

  function schedule(key){
    clearTimeout(timers[key]);
    if(Date.now()<backoffUntil){
      timers[key] = setTimeout(()=>schedule(key), backoffUntil - Date.now() + 1000);
      return;
    }
    if(!cfg.enabled){
      timers[key] = setTimeout(()=>schedule(key), 3000);
      return;
    }
    const btn = findBtn(LABELS[key]), cd = getCooldown(btn); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LABELS[key]

    if(cd===0){
      const since = Date.now() - (lastClick[key]||0),
            gap   = 8000 + rnd(0,2000); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
      if(cfg[key] && btn && !btn.disabled && since>gap){
        doClick(btn);
        lastClick[key] = Date.now();
        stats.clickCount[key]++; saveStats(); updateStatsUI();
        log(`‚ö° ${key}`);
      }
      timers[key] = setTimeout(()=>schedule(key),1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –µ—Å–ª–∏ –Ω–µ—Ç –∫—É–ª–¥–∞—É–Ω–∞
    } else {
      const delay = cd + 1000 + rnd(0,1500); // –ó–∞–¥–µ—Ä–∂–∫–∞ + –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–Ω–¥–æ–º
      log(`‚è≥ ${key}: ${Math.round(cd/1000)}s`);
      timers[key] = setTimeout(()=>schedule(key), delay);
    }
  }
  function startAll(){
    Object.keys(LABELS).forEach(key => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º 'autoFarm' –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Ç.–∫. –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      if (key !== 'autoFarm') {
        schedule(key);
      }
    });
  }

  // 5) Auto-reload
  let reloadTimer = null;
  function scheduleReload(){
    if(reloadTimer) clearTimeout(reloadTimer);
    if(!cfg.autoReload) return;
    const ms = cfg.reloadMinutes * 60 * 1000;
    console.info(`[AutoBoost] Next reload in ${cfg.reloadMinutes}m`);
    reloadTimer = setTimeout(()=>{
      stats.reloadCount++; saveStats(); updateStatsUI();
      hardReload();
    }, ms);
  }
  function hardReload(){
    const url = location.pathname + '?_=' + Date.now(); // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∞
    location.replace(url); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ replace –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
  }

  // 6) Vercel keep-alive (–µ—Å–ª–∏ —Å–∞–π—Ç —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ Vercel –∏ —Ç—Ä–µ–±—É–µ—Ç —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
  function scheduleVercel(){
    if(!cfg.keepAlive) return;
    const ms = rnd(50,55)*60*1000;
    console.info(`[AutoBoost] Vercel keepalive in ‚âà${Math.round(ms/60000)}m`);
    setTimeout(()=>{
      const f = document.createElement('iframe');
      f.style.display='none'; f.src='/'; // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–∫—Ä—ã—Ç–æ–º iframe
      document.body.append(f);
      setTimeout(()=>f.remove(),15000); // –£–¥–∞–ª—è–µ–º iframe —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
      scheduleVercel(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
    }, ms);
  }

  // 7) Farm reward every 8 hours (toggleable)
  let farmIntervalId = null; // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã —Å farmTimer
  function doFarm(){
    if (!cfg.autoFarm) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
    const farmBtn = findBtn(LABELS.autoFarm); // –ò—Å–ø–æ–ª—å–∑—É–µ–º findBtn –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ñ–µ—Ä–º—ã
    if(farmBtn && !farmBtn.disabled){
      console.info('üåæ Farm reward button found and enabled. Clicking...');
      doClick(farmBtn);
      stats.clickCount.autoFarm++; saveStats(); updateStatsUI(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞—Ä–º–∞
    } else if (farmBtn && farmBtn.disabled) {
      console.info('üåæ Farm reward button found but disabled (on cooldown).');
    } else {
      console.warn('üåæ Farm reward button not found.');
    }
  }
  function scheduleFarm(){
    if(farmIntervalId) clearInterval(farmIntervalId); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if(!cfg.autoFarm) return;
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞—Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    doFarm();
    farmIntervalId = setInterval(doFarm, 8*60*60*1000 + rnd(0, 5*60*1000)); // 8 —á–∞—Å–æ–≤ + –¥–æ 5 –º–∏–Ω—É—Ç —Ä–∞–Ω–¥–æ–º–∞
  }

  // 8) Init
  function init(){
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –±—É—Å—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if(!findBtn(LABELS.autoAC) && !findBtn(LABELS.autoSM) && !findBtn(LABELS.autoCB)){
      requestAnimationFrame(init);
      return;
    }
    console.info('‚úÖ AutoBoost initialized');
    startAll();
    renderUI();
    scheduleReload();
    scheduleVercel();
    scheduleFarm(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∞
  }
  if(document.readyState==='complete') init();
  else window.addEventListener('load', init, { once:true });
  // MutationObserver –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  new MutationObserver(m=> m.some(x=>x.type==='childList') && startAll())
    .observe(document.documentElement,{childList:true,subtree:true});

  // 9) Logging
  function log(msg){
    if(!cfg.logEach) return; // –ï—Å–ª–∏ 0, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
    const now = Date.now();
    if(now >= nextLog.value){
      console.log(`[AutoBoost] ${msg}`);
      nextLog.value = now + cfg.logEach*1000;
    }
  }

  // 10) UI + stats (–¥–æ–±–∞–≤–ª–µ–Ω —á–µ–∫–±–æ–∫—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è autoFarm)
  let updateStatsUI = ()=>{}; // –ó–∞–≥–ª—É—à–∫–∞, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
  function renderUI(){
    if(document.querySelector('.gu-gear')) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ UI

    const css = `
      .gu-gear{position:fixed;top:12px;right:12px;width:36px;height:36px;
        background:#1b1b25dd;border-radius:50%;display:flex;align-items:center;
        justify-content:center;cursor:pointer;z-index:9999;color:#8cf;font-size:20px;}
      .gu-gear:hover{transform:rotate(45deg);}
      .gu-panel{position:fixed;top:56px;right:12px;width:340px;
        background:#1b1b25f2;padding:12px;border-radius:8px;
        font:13px/1.4 sans-serif;color:#cee;box-shadow: 0 4px 8px rgba(0,0,0,0.3);}
      .gu-panel hr{border-color:#444;margin:8px 0;}
      .gu-panel .row{display:flex;align-items:center;
        justify-content:space-between;margin:4px 0;}
      .gu-panel .row label{flex:1;margin-right:8px;cursor:pointer;}
      .gu-panel input[type=number]{
        width:60px;padding:2px 4px;background:#111;color:#fee;
        border:1px solid #555;border-radius:4px;
        -moz-appearance:textfield;appearance:none;}
      .gu-panel input::-webkit-inner-spin-button,
      .gu-panel input::-webkit-outer-spin-button{
        -webkit-appearance:none;margin:0;}
      .gu-panel button{width:100%;margin-top:8px;padding:6px 0;
        background:#444;border:none;border-radius:4px;color:#eee;cursor:pointer;
        transition: background-color 0.2s;}
      .gu-panel button:hover{background:#555;}
      .stat-value{font-weight:bold;color:#4CAF50;}
    `;
    const html = `
      <div class="gu-gear">‚öôÔ∏è</div>
      <div class="gu-panel" style="display:none">
        <div class="row"><label><input id="gu-enabled" type="checkbox"> Enable All</label></div><hr/>
        <div class="row"><label><input id="gu-ac" type="checkbox"> Auto Collector</label></div>
        <div class="row"><label><input id="gu-sm" type="checkbox"> Shard Multiplier</label></div>
        <div class="row"><label><input id="gu-cb" type="checkbox"> Conveyor Booster</label></div><hr/>
        <div class="row"><label><input id="gu-farm" type="checkbox"> Auto Farm (8h)</label></div><hr/>
        <div class="row"><label><input id="gu-ka" type="checkbox"> Keep Alive</label></div>
        <div class="row"><label><input id="gu-reload" type="checkbox"> Auto Reload</label></div>
        <div class="row">
          <label for="gu-reload-min">Reload Interval (min)</label>
          <input id="gu-reload-min" type="number" min="1"/>
        </div><hr/>
        <div class="row">
          <label for="gu-log">Log Every (s)</label>
          <input id="gu-log" type="number" min="0"/>
        </div><hr/>
        <div class="row"><label>Reload Count</label><div id="stat-reloads" class="stat-value">0</div></div>
        <div class="row"><label>Collector Clicks</label><div id="stat-autoAC"  class="stat-value">0</div></div>
        <div class="row"><label>Shard Clicks</label><div id="stat-autoSM" class="stat-value">0</div></div>
        <div class="row"><label>Booster Clicks</label><div id="stat-autoCB" class="stat-value">0</div></div>
        <div class="row"><label>Farm Clicks</label><div id="stat-autoFarm" class="stat-value">0</div></div><hr/>
        <button id="gu-reset">Reset to Defaults</button>
      </div>
    `;
    document.head.insertAdjacentHTML('beforeend',`<style>${css}</style>`);
    document.body.insertAdjacentHTML('beforeend',html);

    const $       = s=>document.querySelector(s),
          gear  = $('.gu-gear'),
          panel = $('.gu-panel');

    updateStatsUI = ()=>{
      $('#stat-reloads').textContent = stats.reloadCount;
      $('#stat-autoAC').textContent   = stats.clickCount.autoAC;
      $('#stat-autoSM').textContent   = stats.clickCount.autoSM;
      $('#stat-autoCB').textContent   = stats.clickCount.autoCB;
      $('#stat-autoFarm').textContent = stats.clickCount.autoFarm; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ–∞—Ä–º–∞
    };

    function syncUI(){
      $('#gu-enabled').checked       = cfg.enabled;
      $('#gu-ac').checked            = cfg.autoAC;
      $('#gu-sm').checked            = cfg.autoSM;
      $('#gu-cb').checked            = cfg.autoCB;
      $('#gu-farm').checked          = cfg.autoFarm;
      $('#gu-ka').checked            = cfg.keepAlive;
      $('#gu-reload').checked        = cfg.autoReload;
      $('#gu-reload-min').value      = cfg.reloadMinutes;
      $('#gu-log').value             = cfg.logEach;
      updateStatsUI();
    }
    syncUI();

    $('#gu-enabled').onchange      = e=>{ cfg.enabled       = e.target.checked; saveConfig(); startAll(); };
    $('#gu-ac').onchange           = e=>{ cfg.autoAC        = e.target.checked; saveConfig(); };
    $('#gu-sm').onchange           = e=>{ cfg.autoSM        = e.target.checked; saveConfig(); };
    $('#gu-cb').onchange           = e=>{ cfg.autoCB        = e.target.checked; saveConfig(); };
    $('#gu-farm').onchange         = e=>{ cfg.autoFarm      = e.target.checked; saveConfig(); scheduleFarm(); };
    $('#gu-ka').onchange           = e=>{ cfg.keepAlive     = e.target.checked; saveConfig(); };
    $('#gu-reload').onchange       = e=>{ cfg.autoReload    = e.target.checked; saveConfig(); scheduleReload(); };
    $('#gu-reload-min').onchange  = e=>{ cfg.reloadMinutes= Math.max(1,~~e.target.value); saveConfig(); scheduleReload(); };
    $('#gu-log').onchange          = e=>{ cfg.logEach       = Math.max(0,~~e.target.value); saveConfig(); };
    $('#gu-reset').onclick         = ()=>{
      Object.assign(cfg,DEF);
      stats = { reloadCount:0, clickCount:{autoAC:0,autoSM:0,autoCB:0,autoFarm:0} }; // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ–∞—Ä–º–∞
      saveConfig(); saveStats();
      syncUI(); startAll(); scheduleFarm(); console.clear(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–∞—Ä–º–∞
    };

    gear.onclick = ()=> panel.style.display = panel.style.display==='none'?'block':'none';
  }

})();
