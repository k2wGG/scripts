#!/bin/bash

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Rust (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

SCRIPT_NAME="BITZ-CLI"
SCRIPT_VERSION="1.0.0"
VERSIONS_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/versions.txt"
SCRIPT_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/BITZ-CLI.sh"

GREEN='\033[0;32m'
NC='\033[0m'

show_logo() {
cat <<'EOF'
 _   _           _  _____      
| \ | |         | ||____ |     
|  \| | ___   __| |    / /_ __ 
| . ` |/ _ \ / _` |    \ \ '__|
| |\  | (_) | (_| |.___/ / |   
\_| \_/\___/ \__,_|\____/|_|   
                               
BITZ CLI Node Manager ‚Äî —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏ @Nod3r 
EOF
}

function header() {
  clear
  echo -e "${GREEN}"
  show_logo
  echo -e "${NC}"
  echo -e "–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${SCRIPT_VERSION}"

  remote_version=$(curl -s "$VERSIONS_FILE_URL" | grep "^${SCRIPT_NAME}=" | cut -d "=" -f2)
  if [[ -n "$remote_version" ]]; then
    if [[ "$remote_version" != "$SCRIPT_VERSION" ]]; then
      echo -e "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${remote_version}"
      echo -e "üì• –û–±–Ω–æ–≤–∏—Ç—å: wget -O BITZ-CLI.sh $SCRIPT_FILE_URL && chmod +x BITZ-CLI.sh"
    else
      echo -e "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è."
    fi
  else
    echo -e "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
  fi
  echo ""
}

function pause() {
  read -rp "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
}

function install_dependencies() {
  header
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
  sudo apt update && sudo apt upgrade -y
  sudo apt install screen curl nano build-essential pkg-config libssl-dev clang -y

  if ! command -v cargo &> /dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
    echo 'source "$HOME/.cargo/env"' >> ~/.bashrc
  else
    source "$HOME/.cargo/env"
  fi

  if ! command -v solana &> /dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Solana CLI..."
    sh -c "$(curl -sSfL https://release.solana.com/v1.18.2/install)"
    export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
    echo 'export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"' >> ~/.bashrc
    source ~/.bashrc
  else
    export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
  fi

  solana config set --url https://eclipse.helius-rpc.com
  echo -e "\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
  pause
}

function create_wallet() {
  header
  if [ -f "$HOME/.config/solana/id.json" ]; then
    echo "‚ö†Ô∏è –ö–æ—à–µ–ª—ë–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $HOME/.config/solana/id.json"
    read -rp "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (yes/no): " confirm
    if [[ "$confirm" == "yes" ]]; then
      solana-keygen new --force
    else
      echo "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
      pause
      return
    fi
  else
    solana-keygen new
  fi
  pause
}

function show_private_key() {
  header
  echo "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (–∫–æ–ø–∏—Ä—É–π –º–∞—Å—Å–∏–≤):"
  cat ~/.config/solana/id.json
  pause
}

function install_bitz() {
  header
  if ! command -v cargo &> /dev/null; then
    echo "‚ùå Cargo –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ Rust —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø—É–Ω–∫—Ç 1)."
    pause
    return
  fi

  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ BITZ..."
  cargo install bitz --force
  pause
}

function start_miner() {
  header

  if ! command -v bitz &> /dev/null; then
    echo "‚ùå –ö–æ–º–∞–Ω–¥–∞ 'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BITZ (–ø—É–Ω–∫—Ç 4)."
    pause
    return
  fi

  read -rp "–°–∫–æ–ª—å–∫–æ —è–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4): " CORES
  if ! [[ "$CORES" =~ ^[0-9]+$ ]]; then
    echo "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4)."
    pause
    return
  fi

  LOG_PATH="$HOME/bitz.log"
  rm -f "$LOG_PATH"

  echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ –≤ screen-—Å–µ—Å—Å–∏–∏ 'bitz'..."
  screen -dmS bitz bash -c "bitz collect --cores $CORES 2>&1 | tee -a '$LOG_PATH'"

  sleep 2

  if screen -list | grep -q "\.bitz"; then
    echo "‚úÖ –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω."
    echo "üìÑ –õ–æ–≥: $LOG_PATH"
  else
    echo "‚ùå Screen-—Å–µ—Å—Å–∏—è 'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
    echo "   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ 'bitz collect' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
    echo "   ‚Ä¢ –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RPC –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–µ"
    echo "   ‚Ä¢ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–ª–∏ —Å–µ—Ç–∏"
    echo "üìÑ –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥: $LOG_PATH"
  fi

  pause
}

function stop_miner() {
  header
  if screen -list | grep -q "\.bitz"; then
    screen -XS bitz quit
    echo "üõë –ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  else
    echo "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π screen-—Å–µ—Å—Å–∏–∏ 'bitz'. –ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è."
  fi
  pause
}

function check_account() {
  header
  command -v bitz &> /dev/null && bitz account || echo "'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω."
  pause
}

function claim_tokens() {
  header
  command -v bitz &> /dev/null && bitz claim || echo "'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω."
  pause
}

function uninstall_node() {
  header
  echo "‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ BITZ, Rust, Solana, screen..."
  read -rp "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë? (yes/no): " confirm
  [[ "$confirm" != "yes" ]] && echo "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ." && pause && return

  cargo uninstall bitz 2>/dev/null
  rm -rf ~/.cargo ~/.rustup
  rm -rf ~/.local/share/solana ~/.config/solana
  sudo apt remove --purge screen -y
  sudo apt autoremove -y
  rm -f ~/bitz.log

  echo "‚úÖ –í—Å—ë —É–¥–∞–ª–µ–Ω–æ."
  pause
}

function show_menu() {
  while true; do
    header
    echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "2. –°–æ–∑–¥–∞—Ç—å CLI-–∫–æ—à–µ–ª—ë–∫"
    echo "3. –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"
    echo "4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BITZ"
    echo "5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "6. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    echo "8. –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã"
    echo "9. –í—ã–π—Ç–∏"
    echo "10. üîß –£–¥–∞–ª–∏—Ç—å –≤—Å—ë (–Ω–æ–¥—É, Rust, Solana, screen)"
    read -rp "üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: " choice

    case $choice in
      1) install_dependencies ;;
      2) create_wallet ;;
      3) show_private_key ;;
      4) install_bitz ;;
      5) start_miner ;;
      6) stop_miner ;;
      7) check_account ;;
      8) claim_tokens ;;
      9) echo "üëã –í—ã—Ö–æ–¥..." && break ;;
     10) uninstall_node ;;
      *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." && sleep 1 ;;
    esac
  done
}

show_menu
