#!/bin/bash

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Rust (–µ—Å–ª–∏ –µ—Å—Ç—å)
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

SCRIPT_NAME="BITZ-CLI"
SCRIPT_VERSION="1.1.0"
VERSIONS_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/versions.txt"
SCRIPT_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/BITZ-CLI.sh"

GREEN='\033[0;32m'
NC='\033[0m'

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–∏—Å—Å–∏–∏
CONFIG_FILE="$HOME/.bitz-cli.conf"

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RPC (Eclipse/Helius)
RPC_URL="https://eclipse.helius-rpc.com"
solana config set --url "$RPC_URL"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PRIORITY_FEE=50000      # –º–∏–∫—Ä–æ–ª–∞–º–ø–æ—Ä—Ç–æ–≤ –∑–∞ 1 CU
WAIT_ON_FEE=true        # –∂–¥–∞—Ç—å –ª–∏ —Å–Ω–∏–∂–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –ø–ª–∞—Ç—ã?
MIN_FEE_TARGET=6000     # –ª–∞–º–ø–æ—Ä—Ç/–ø–æ–¥–ø–∏—Å—å

# –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º
if [[ -f "$CONFIG_FILE" ]]; then
  source "$CONFIG_FILE"
fi

# –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è bitz
build_fee_flags() {
  echo "--priority-fee $PRIORITY_FEE"
}

show_logo() {
  cat <<'EOF'
 _   _           _  _____      
| \ | |         | ||____ |     
|  \| | ___   __| |    / /_ __ 
| . ` |/ _ \ / _` |    \ \ '__|
| |\  | (_) | (_| |.___/ / |   
\_| \_/\___/ \__,_|\____/|_|   
                               
BITZ CLI Node Manager ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
EOF
}

header() {
  clear
  echo -e "${GREEN}"
  show_logo
  echo -e "${NC}"
  echo "–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: $SCRIPT_VERSION"
  echo "RPC: $RPC_URL"
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  rv=$(curl -s "$VERSIONS_FILE_URL" | grep "^${SCRIPT_NAME}=" | cut -d'=' -f2)
  if [[ -n $rv && $rv != $SCRIPT_VERSION ]]; then
    echo "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –≤–µ—Ä—Å–∏—è: $rv"
    echo "  wget -O BITZ-CLI.sh $SCRIPT_FILE_URL && chmod +x BITZ-CLI.sh"
  fi
  echo
}

pause() {
  read -rp "–ù–∞–∂–º–∏—Ç–µ Enter..."
}

install_dependencies() {
  header
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
  sudo apt update && sudo apt upgrade -y
  sudo apt install -y screen curl nano build-essential pkg-config libssl-dev clang jq

  # Rust / cargo
  if ! command -v cargo &>/dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Rust..."
    curl https://sh.rustup.rs -sSf | sh -s -- -y
    source "$HOME/.cargo/env"
    echo 'source "$HOME/.cargo/env"' >> ~/.bashrc
  fi

  # Solana CLI
  if ! command -v solana &>/dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Solana CLI..."
    sh -c "$(curl -sSfL https://release.solana.com/v1.18.2/install)"
    echo 'export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"' >> ~/.bashrc
    source ~/.bashrc
  fi

  solana config set --url "$RPC_URL"
  echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
  pause
}

create_wallet() {
  header
  if [[ -f "$HOME/.config/solana/id.json" ]]; then
    read -rp "–ö–æ—à–µ–ª—ë–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (yes/no): " yn
    [[ $yn != yes ]] && { echo "–û—Ç–º–µ–Ω–∞."; pause; return; }
    solana-keygen new --force
  else
    solana-keygen new
  fi
  pause
}

show_private_key() {
  header
  echo "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (id.json):"
  cat "$HOME/.config/solana/id.json"
  pause
}

install_bitz() {
  header
  if ! command -v cargo &>/dev/null; then
    echo "Cargo –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Rust."
    pause; return
  fi
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ BITZ..."
  cargo install bitz --force
  pause
}

start_miner() {
  header
  if ! command -v bitz &>/dev/null; then
    echo "'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BITZ."
    pause; return
  fi
  read -rp "–Ø–¥–µ—Ä –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ (1-16): " CORES
  [[ ! "$CORES" =~ ^[0-9]+$ ]] && { echo "–ù—É–∂–Ω–æ —á–∏—Å–ª–æ!"; pause; return; }
  LOG="$HOME/bitz.log"; rm -f "$LOG"
  FFLAGS=$(build_fee_flags)
  screen -dmS bitz bash -c "bitz $FFLAGS collect --cores $CORES 2>&1 | tee -a '$LOG'"
  sleep 2
  if screen -list | grep -q "\.bitz"; then
    echo "‚úÖ –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (–ª–æ–≥: $LOG)"
  else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞. –°–º–æ—Ç—Ä–∏—Ç–µ $LOG"
  fi
  pause
}

stop_miner() {
  header
  if screen -list | grep -q "\.bitz"; then
    screen -XS bitz quit
    echo "üõë –ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  else
    echo "‚ÑπÔ∏è –ú–∞–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω."
  fi
  pause
}

check_account() {
  header
  bitz $(build_fee_flags) account
  pause
}

# –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Helius, –∏–Ω–∞—á–µ –ø—É–±–ª–∏—á–Ω—ã–π mainnet-beta
get_current_fee() {
  hb=$(curl -s -X POST -H "Content-Type: application/json" \
    -d '{"jsonrpc":"2.0","id":1,"method":"getLatestBlockhash","params":[{"commitment":"confirmed"}]}' \
    "$RPC_URL" | jq -r '.result.value.blockhash // empty')
  if [[ -n $hb ]]; then
    curl -s -X POST -H "Content-Type: application/json" \
      -d "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getFeeCalculatorForBlockhash\",\"params\":[\"$hb\",{\"commitment\":\"confirmed\"}]}" \
      "$RPC_URL" | jq -r '.result.value.feeCalculator.lamportsPerSignature // empty'
  else
    solana fees --url https://api.mainnet-beta.solana.com \
      | awk '/Lamports per signature/ {print $4}'
  fi
}

wait_for_low_fee() {
  echo "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–ª–∞—Ç—É ‚â§ $MIN_FEE_TARGET lamports..."
  while :; do
    fee=$(get_current_fee)
    echo "  —Ç–µ–∫—É—â–∞—è –ø–ª–∞—Ç–∞ = $fee"
    (( fee <= MIN_FEE_TARGET )) && { echo "‚úÖ OK: $fee"; break; }
    sleep 60
  done
}

show_fee_info() {
  header
  fee=$(get_current_fee)
  echo "Lamports per signature: $fee"
  pause
}

set_fee_settings() {
  header
  read -rp "PRIORITY_FEE (–º–∏–∫—Ä–æ–ª–∞–º–ø/CU) [$PRIORITY_FEE]: " x && [[ $x ]] && PRIORITY_FEE=$x
  read -rp "WAIT_ON_FEE (true/false) [$WAIT_ON_FEE]: " x && [[ $x ]] && WAIT_ON_FEE=$x
  read -rp "MIN_FEE_TARGET (lamports/signature) [$MIN_FEE_TARGET]: " x && [[ $x ]] && MIN_FEE_TARGET=$x
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  cat > "$CONFIG_FILE" <<EOF
PRIORITY_FEE=$PRIORITY_FEE
WAIT_ON_FEE=$WAIT_ON_FEE
MIN_FEE_TARGET=$MIN_FEE_TARGET
EOF
  echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $CONFIG_FILE"
  pause
}

claim_tokens() {
  header
  [[ $WAIT_ON_FEE == true ]] && wait_for_low_fee
  addr=$(bitz account | awk '/Address/ {print $2}')
  FFLAGS=$(build_fee_flags)
  echo "‚ñ∂Ô∏è Claim ‚Üí $addr ($FFLAGS)"
  bitz $FFLAGS claim --to "$addr" || echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ claim"
  pause
}

uninstall_node() {
  header
  read -rp "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë? (yes/no): " yn
  [[ $yn != yes ]] && { echo "–û—Ç–º–µ–Ω–∞."; pause; return; }
  cargo uninstall bitz 2>/dev/null
  rm -rf ~/.cargo ~/.rustup ~/.local/share/solana ~/.config/solana "$CONFIG_FILE" ~/bitz.log
  sudo apt remove --purge -y screen jq clang pkg-config libssl-dev
  sudo apt autoremove -y
  echo "‚úÖ –í—Å—ë —É–¥–∞–ª–µ–Ω–æ."
  pause
}

show_menu() {
  while :; do
    header
    echo "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "2) –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫"
    echo "3) –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"
    echo "4) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BITZ"
    echo "5) –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "6) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "7) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    echo "8) –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã (claim)"
    echo "9) –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é"
    echo "10) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏"
    echo "11) –£–¥–∞–ª–∏—Ç—å –≤—Å—ë"
    echo "12) –í—ã–π—Ç–∏"
    read -rp "üëâ –í—ã–±–æ—Ä: " choice
    case $choice in
      1) install_dependencies ;;
      2) create_wallet       ;;
      3) show_private_key    ;;
      4) install_bitz        ;;
      5) start_miner         ;;
      6) stop_miner          ;;
      7) check_account       ;;
      8) claim_tokens        ;;
      9) show_fee_info       ;;
      10) set_fee_settings   ;;
      11) uninstall_node     ;;
      12) exit 0             ;;
      *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." && sleep 1 ;;
    esac
  done
}

show_menu
