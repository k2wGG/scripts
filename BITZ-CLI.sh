#!/bin/bash

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Rust (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

SCRIPT_NAME="BITZ-CLI"
SCRIPT_VERSION="1.1.1"
VERSIONS_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/versions.txt"
SCRIPT_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/BITZ-CLI.sh"

GREEN='\033[0;32m'
NC='\033[0m'

# === –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RPC (Eclipse/Helius) ===
RPC_URL="https://eclipse.helius-rpc.com"
solana config set --url $RPC_URL

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∏—Å—Å–∏–∏ (Compute Unit price) ===
# –°–∫–æ–ª—å–∫–æ –º–∏–∫—Ä–æ–ª–∞–º–ø–æ—Ä—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ 1 CU
PRIORITY_FEE=100000
# –ñ–¥–∞—Ç—å –ª–∏, –ø–æ–∫–∞ –ø–ª–∞—Ç–∞ —É–ø–∞–¥—ë—Ç –¥–æ MIN_FEE_TARGET?
WAIT_ON_FEE=true
# –ù–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –ª–∞–º–ø–æ—Ä—Ç/–ø–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
MIN_FEE_TARGET=10000

# –°–æ–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è bitz
build_fee_flags() {
  echo "--priority-fee $PRIORITY_FEE"
}

show_logo() {
cat <<'EOF'
 _   _           _  _____      
| \ | |         | ||____ |     
|  \| | ___   __| |    / /_ __ 
| . ` |/ _ \ / _` |    \ \ '__|
| |\  | (_) | (_| |.___/ / |   
\_| \_/\___/ \__,_|\____/|_|   
                               
BITZ CLI Node Manager ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
EOF
}

header() {
  clear
  echo -e "${GREEN}"
  show_logo
  echo -e "${NC}"
  echo "–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${SCRIPT_VERSION}"
  remote_version=$(curl -s "$VERSIONS_FILE_URL" \
                     | grep "^${SCRIPT_NAME}=" \
                     | cut -d'=' -f2)
  if [[ -n "$remote_version" ]]; then
    if [[ "$remote_version" != "$SCRIPT_VERSION" ]]; then
      echo "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${remote_version}"
      echo "  –û–±–Ω–æ–≤–∏—Ç—å: wget -O BITZ-CLI.sh $SCRIPT_FILE_URL && chmod +x BITZ-CLI.sh"
    else
      echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è."
    fi
  else
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
  fi
  echo ""
}

pause() {
  read -rp "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
}

install_dependencies() {
  header
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
  sudo apt update && sudo apt upgrade -y
  sudo apt install -y screen curl nano build-essential pkg-config \
                      libssl-dev clang jq

  # Rust / cargo
  if ! command -v cargo &>/dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs \
      | sh -s -- -y
    source "$HOME/.cargo/env"
    echo 'source "$HOME/.cargo/env"' >> ~/.bashrc
  else
    source "$HOME/.cargo/env"
  fi

  # Solana CLI
  if ! command -v solana &>/dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Solana CLI..."
    sh -c "$(curl -sSfL https://release.solana.com/v1.18.2/install)"
    export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
    echo 'export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"' \
      >> ~/.bashrc
    source ~/.bashrc
  fi

  solana config set --url $RPC_URL
  echo -e "\n‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
  pause
}

create_wallet() {
  header
  if [[ -f "$HOME/.config/solana/id.json" ]]; then
    echo "‚ö†Ô∏è –ö–æ—à–µ–ª—ë–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    read -rp "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (yes/no): " yn
    if [[ "$yn" == "yes" ]]; then
      solana-keygen new --force
    else
      echo "–û—Ç–º–µ–Ω–∞."
      pause
      return
    fi
  else
    solana-keygen new
  fi
  pause
}

show_private_key() {
  header
  echo "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (id.json):"
  cat "$HOME/.config/solana/id.json"
  pause
}

install_bitz() {
  header
  if ! command -v cargo &>/dev/null; then
    echo "Cargo –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Rust."
    pause
    return
  fi
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ BITZ..."
  cargo install bitz --force
  pause
}

start_miner() {
  header
  if ! command -v bitz &>/dev/null; then
    echo "‚ùå 'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BITZ (–ø—É–Ω–∫—Ç 4)."
    pause
    return
  fi

  read -rp "–°–∫–æ–ª—å–∫–æ —è–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (4 –∏–∑ 16): " CORES
  if [[ ! "$CORES" =~ ^[0-9]+$ ]]; then
    echo "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
    pause
    return
  fi

  LOG="$HOME/bitz.log"
  rm -f "$LOG"

  FFLAGS=$(build_fee_flags)
  echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞: bitz $FFLAGS collect --cores $CORES"
  screen -dmS bitz bash -c "bitz $FFLAGS collect --cores $CORES 2>&1 | tee -a '$LOG'"

  sleep 2
  if screen -list | grep -q "\.bitz"; then
    echo "‚úÖ –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –õ–æ–≥: $LOG"
  else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥: $LOG"
  fi
  pause
}

stop_miner() {
  header
  if screen -list | grep -q "\.bitz"; then
    screen -XS bitz quit
    echo "üõë –ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  else
    echo "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏."
  fi
  pause
}

check_account() {
  header
  if ! command -v bitz &>/dev/null; then
    echo "‚ùå 'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω."
  else
    bitz $(build_fee_flags) account
  fi
  pause
}

# –ë–µ—Ä—ë–º –±–∞–∑–æ–≤—É—é –ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ JSON-RPC getLatestBlockhash
get_current_fee() {
  curl -s -X POST -H "Content-Type: application/json" \
    -d '{
      "jsonrpc":"2.0",
      "id":1,
      "method":"getLatestBlockhash",
      "params":[{"commitment":"confirmed"}]
    }' \
    "$RPC_URL" \
  | jq '.result.value.feeCalculator.lamportsPerSignature'
}

# –ñ–¥—ë–º, –ø–æ–∫–∞ –±–∞–∑–æ–≤–∞—è –ø–ª–∞—Ç–∞ —É–ø–∞–¥—ë—Ç –¥–æ MIN_FEE_TARGET
wait_for_low_fee() {
  echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—ã ‚â§ $MIN_FEE_TARGET..."
  while true; do
    fee=$(get_current_fee)
    echo "  —Ç–µ–∫—É—â–∞—è –±–∞–∑–æ–≤–∞—è –ø–ª–∞—Ç–∞ = $fee"
    if (( fee <= MIN_FEE_TARGET )); then
      echo "‚úÖ –ü–ª–∞—Ç–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ $fee."
      break
    fi
    sleep 60
  done
}

show_fee_info() {
  header
  echo "üîç –ò–Ω—Ñ–æ –ø–æ RPC $RPC_URL"
  echo "  Lamports per signature (–±–∞–∑–æ–≤–∞—è): $(get_current_fee)"
  echo ""
  echo "–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
  echo "  PRIORITY_FEE  = $PRIORITY_FEE"
  echo "  WAIT_ON_FEE   = $WAIT_ON_FEE"
  echo "  MIN_FEE_TARGET= $MIN_FEE_TARGET"
  pause
}

claim_tokens() {
  header
  if ! command -v bitz &>/dev/null; then
    echo "‚ùå 'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω."
    pause
    return
  fi

  if [[ "$WAIT_ON_FEE" == "true" ]]; then
    wait_for_low_fee
  fi

  ADDR=$(bitz account | grep Address | awk '{print $2}')
  FFLAGS=$(build_fee_flags)
  echo "‚ñ∂Ô∏è Claim ‚Üí $ADDR (flags: $FFLAGS)"
  bitz $FFLAGS claim --to "$ADDR" \
    || echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ claim"
  pause
}

uninstall_node() {
  header
  echo "‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ:"
  read -rp "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ (yes/no): " yn
  if [[ "$yn" != "yes" ]]; then
    echo "–û—Ç–º–µ–Ω–∞."
    pause
    return
  fi

  cargo uninstall bitz 2>/dev/null
  rm -rf ~/.cargo ~/.rustup
  rm -rf ~/.local/share/solana ~/.config/solana
  sudo apt remove --purge -y screen
  sudo apt autoremove -y
  rm -f ~/bitz.log

  echo "‚úÖ –£–¥–∞–ª–µ–Ω–æ."
  pause
}

show_menu() {
  while true; do
    header
    echo "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "2) –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫"
    echo "3) –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"
    echo "4) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BITZ"
    echo "5) –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "6) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "7) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    echo "8) –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã (claim)"
    echo "9) –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é"
    echo "10) –£–¥–∞–ª–∏—Ç—å –≤—Å—ë"
    echo "11) –í—ã–π—Ç–∏"
    read -rp "üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: " choice

    case $choice in
      1) install_dependencies ;;
      2) create_wallet      ;;
      3) show_private_key   ;;
      4) install_bitz       ;;
      5) start_miner        ;;
      6) stop_miner         ;;
      7) check_account      ;;
      8) claim_tokens       ;;
      9) show_fee_info      ;;
      10) uninstall_node    ;;
      11) echo "üëã –í—ã—Ö–æ–¥" && exit 0 ;;
      *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." && sleep 1 ;;
    esac
  done
}

show_menu
