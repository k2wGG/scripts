#!/bin/bash

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Rust (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

SCRIPT_NAME="BITZ-CLI"
SCRIPT_VERSION="1.1.0"
VERSIONS_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/versions.txt"
SCRIPT_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/BITZ-CLI.sh"

GREEN='\033[0;32m'
NC='\033[0m'

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ (Compute Unit Price) ====
# –°–∫–æ–ª—å–∫–æ –º–∏–∫—Ä–æ–ª–∞–º–ø–æ—Ä—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ 1 CU
PRIORITY_FEE=100000
# –û–∂–∏–¥–∞—Ç—å –ª–∏ —Å–Ω–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—ã –¥–æ MIN_FEE_TARGET (true/false)
WAIT_ON_FEE=true
# –ü–æ—Ä–æ–≥: –µ—Å–ª–∏ solana fees <= —ç—Ç–æ–≥–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
MIN_FEE_TARGET=7000
# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç —Ü–µ–Ω—ã (true/false)
DYNAMIC_FEE=false
# RPC –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ (–µ—Å–ª–∏ DYNAMIC_FEE=true)
DYNAMIC_FEE_URL="https://eclipse.helius-rpc.com"

# –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ bitz –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
build_fee_flags() {
  local flags="--priority-fee $PRIORITY_FEE"
  if [[ "$DYNAMIC_FEE" == "true" ]]; then
    flags="$flags --dynamic-fee --dynamic-fee-url $DYNAMIC_FEE_URL"
  fi
  echo "$flags"
}

show_logo() {
  cat <<'EOF'
 _   _           _  _____      
| \ | |         | ||____ |     
|  \| | ___   __| |    / /_ __ 
| . ` |/ _ \ / _` |    \ \ '__|
| |\  | (_) | (_| |.___/ / |   
\_| \_/\___/ \__,_|\____/|_|   
                               
BITZ CLI Node Manager ‚Äî —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏ @Nod3r 
EOF
}

header() {
  clear
  echo -e "${GREEN}"
  show_logo
  echo -e "${NC}"
  echo -e "–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${SCRIPT_VERSION}"

  remote_version=$(curl -s "$VERSIONS_FILE_URL" | grep "^${SCRIPT_NAME}=" | cut -d "=" -f2)
  if [[ -n "$remote_version" ]]; then
    if [[ "$remote_version" != "$SCRIPT_VERSION" ]]; then
      echo -e "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${remote_version}"
      echo -e "üì• –û–±–Ω–æ–≤–∏—Ç—å: wget -O BITZ-CLI.sh $SCRIPT_FILE_URL && chmod +x BITZ-CLI.sh"
    else
      echo -e "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è."
    fi
  else
    echo -e "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
  fi
  echo ""
}

pause() {
  read -rp "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
}

install_dependencies() {
  header
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
  sudo apt update && sudo apt upgrade -y
  sudo apt install screen curl nano build-essential pkg-config libssl-dev clang jq -y

  if ! command -v cargo &> /dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
    echo 'source "$HOME/.cargo/env"' >> ~/.bashrc
  else
    source "$HOME/.cargo/env"
  fi

  if ! command -v solana &> /dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Solana CLI..."
    sh -c "$(curl -sSfL https://release.solana.com/v1.18.2/install)"
    export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
    echo 'export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"' >> ~/.bashrc
    source ~/.bashrc
  else
    export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
  fi

  solana config set --url $DYNAMIC_FEE_URL
  echo -e "\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
  pause
}

create_wallet() {
  header
  if [ -f "$HOME/.config/solana/id.json" ]; then
    echo "‚ö†Ô∏è –ö–æ—à–µ–ª—ë–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $HOME/.config/solana/id.json"
    read -rp "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (yes/no): " confirm
    if [[ "$confirm" == "yes" ]]; then
      solana-keygen new --force
    else
      echo "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
      pause; return
    fi
  else
    solana-keygen new
  fi
  pause
}

show_private_key() {
  header
  echo "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (–∫–æ–ø–∏—Ä—É–π –º–∞—Å—Å–∏–≤):"
  cat ~/.config/solana/id.json
  pause
}

install_bitz() {
  header
  if ! command -v cargo &> /dev/null; then
    echo "‚ùå Cargo –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ Rust —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø—É–Ω–∫—Ç 1)."
    pause; return
  fi
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ BITZ..."
  cargo install bitz --force
  pause
}

start_miner() {
  header
  if ! command -v bitz &> /dev/null; then
    echo "‚ùå 'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BITZ (–ø—É–Ω–∫—Ç 4)."
    pause; return
  fi
  read -rp "–°–∫–æ–ª—å–∫–æ —è–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4): " CORES
  [[ ! "$CORES" =~ ^[0-9]+$ ]] && echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥." && pause && return

  LOG_PATH="$HOME/bitz.log"
  rm -f "$LOG_PATH"

  FEE_FLAGS=$(build_fee_flags)
  echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ –≤ screen‚Äë—Å–µ—Å—Å–∏–∏ 'bitz' —Å —Ñ–ª–∞–≥–∞–º–∏: $FEE_FLAGS"
  screen -dmS bitz bash -c "bitz $FEE_FLAGS collect --cores $CORES 2>&1 | tee -a '$LOG_PATH'"

  sleep 2
  if screen -list | grep -q "\.bitz"; then
    echo "‚úÖ –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –õ–æ–≥: $LOG_PATH"
  else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥: $LOG_PATH"
  fi
  pause
}

stop_miner() {
  header
  if screen -list | grep -q "\.bitz"; then
    screen -XS bitz quit
    echo "üõë –ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  else
    echo "‚ÑπÔ∏è –ú–∞–∏–Ω–Ω–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω."
  fi
  pause
}

check_account() {
  header
  if ! command -v bitz &> /dev/null; then
    echo "‚ùå 'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω."
  else
    bitz $(build_fee_flags) account
  fi
  pause
}

wait_for_low_fee() {
  header
  echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—ã –¥–æ $MIN_FEE_TARGET –ª–∞–º–ø–æ—Ä—Ç/–ø–æ–¥–ø–∏—Å—å..."
  while true; do
    # –ü–∞—Ä—Å–∏–º lamports per signature –∏–∑ solana fees
    fee=$(solana fees --url $DYNAMIC_FEE_URL | grep "Lamports per signature" | awk '{print $4}')
    echo "–¢–µ–∫—É—â–∞—è –ø–ª–∞—Ç–∞: $fee, —Ü–µ–ª—å: $MIN_FEE_TARGET"
    if (( fee <= MIN_FEE_TARGET )); then
      echo "‚úÖ –ü–ª–∞—Ç–∞ —É–ø–∞–ª–∞ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —É—Ä–æ–≤–Ω—è."
      break
    fi
    sleep 300
  done
}

show_fee_info() {
  header
  echo "üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è Solana (solana fees):"
  solana fees --url $DYNAMIC_FEE_URL       # :contentReference[oaicite:0]{index=0}
  echo ""
  echo "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞:"
  echo "  PRIORITY_FEE        = $PRIORITY_FEE"
  echo "  WAIT_ON_FEE         = $WAIT_ON_FEE"
  echo "  MIN_FEE_TARGET      = $MIN_FEE_TARGET"
  echo "  DYNAMIC_FEE         = $DYNAMIC_FEE"
  echo "  DYNAMIC_FEE_URL     = $DYNAMIC_FEE_URL"
  pause
}

set_fee_settings() {
  header
  echo "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–∏"
  read -rp "PRIORITY_FEE (–º–∏–∫—Ä–æ–ª–∞–º–ø/CU) [$PRIORITY_FEE]: " x && [[ $x ]] && PRIORITY_FEE=$x
  read -rp "WAIT_ON_FEE (true/false) [$WAIT_ON_FEE]: " x && [[ $x ]] && WAIT_ON_FEE=$x
  read -rp "MIN_FEE_TARGET (–ª–∞–º–ø–æ—Ä—Ç/–ø–æ–¥–ø–∏—Å—å) [$MIN_FEE_TARGET]: " x && [[ $x ]] && MIN_FEE_TARGET=$x
  read -rp "DYNAMIC_FEE (true/false) [$DYNAMIC_FEE]: " x && [[ $x ]] && DYNAMIC_FEE=$x
  read -rp "DYNAMIC_FEE_URL [$DYNAMIC_FEE_URL]: " x && [[ $x ]] && DYNAMIC_FEE_URL=$x
  echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
  pause
}

claim_tokens() {
  header
  if ! command -v bitz &> /dev/null; then
    echo "‚ùå 'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω."
    pause; return
  fi

  [[ "$WAIT_ON_FEE" == "true" ]] && wait_for_low_fee

  ADDR=$(bitz account | grep Address | awk '{print $2}')
  echo "‚ñ∂Ô∏è Claim ‚Üí $ADDR —Å —Ñ–ª–∞–≥–∞–º–∏: $(build_fee_flags)"
  bitz $(build_fee_flags) claim --to "$ADDR" \
    || echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ claim"
  pause
}

uninstall_node() {
  header
  echo "‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ BITZ, Rust, Solana, screen..."
  read -rp "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë? (yes/no): " confirm
  [[ "$confirm" != "yes" ]] && echo "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ." && pause && return

  cargo uninstall bitz 2>/dev/null
  rm -rf ~/.cargo ~/.rustup
  rm -rf ~/.local/share/solana ~/.config/solana
  sudo apt remove --purge screen -y
  sudo apt autoremove -y
  rm -f ~/bitz.log

  echo "‚úÖ –í—Å—ë —É–¥–∞–ª–µ–Ω–æ."
  pause
}

show_menu() {
  while true; do
    header
    echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "2. –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫"
    echo "3. –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"
    echo "4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BITZ"
    echo "5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "6. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    echo "8. –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã (claim)"
    echo "9. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏"
    echo "10. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∏—Å—Å–∏—é"
    echo "11. –£–¥–∞–ª–∏—Ç—å –≤—Å—ë"
    echo "12. –í—ã–π—Ç–∏"
    read -rp "üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: " choice

    case $choice in
      1) install_dependencies ;;
      2) create_wallet       ;;
      3) show_private_key    ;;
      4) install_bitz        ;;
      5) start_miner         ;;
      6) stop_miner          ;;
      7) check_account       ;;
      8) claim_tokens        ;;
      9) set_fee_settings    ;;
      10) show_fee_info      ;;
      11) uninstall_node     ;;
      12) echo "üëã –í—ã—Ö–æ–¥..." && break ;;
      *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." && sleep 1 ;;
    esac
  done
}

show_menu
