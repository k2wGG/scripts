#!/bin/bash

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º Rust, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

SCRIPT_NAME="BITZ-CLI"
SCRIPT_VERSION="1.2.0"
VERSIONS_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/versions.txt"
SCRIPT_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/BITZ-CLI.sh"

GREEN='\033[0;32m'
NC='\033[0m'

# === –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RPC (Eclipse/Helius) ===
RPC_URL="https://eclipse.helius-rpc.com"
solana config set --url "$RPC_URL"

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∏—Å—Å–∏–∏ (Compute Unit price) ===
PRIORITY_FEE=100000      # –º–∏–∫—Ä–æ–ª–∞–º–ø–æ—Ä—Ç–æ–≤ –∑–∞ 1 CU
WAIT_ON_FEE=true         # –∂–¥–∞—Ç—å –ª–∏ —Å–Ω–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—ã –ø–µ—Ä–µ–¥ claim
MIN_FEE_TARGET=10000     # –ª–∞–º–ø–æ—Ä—Ç/–ø–æ–¥–ø–∏—Å—å, –ø–æ—Ä–æ–≥ –¥–ª—è wait

# –°–æ–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è bitz
build_fee_flags(){
  echo "--priority-fee $PRIORITY_FEE"
}

show_logo(){
  cat <<'EOF'
 _   _           _  _____      
| \ | |         | ||____ |     
|  \| | ___   __| |    / /_ __ 
| . ` |/ _ \ / _` |    \ \ '__|
| |\  | (_) | (_| |.___/ / |   
\_| \_/\___/ \__,_|\____/|_|   
                               
BITZ CLI Node Manager ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
EOF
}

header(){
  clear
  echo -e "${GREEN}"
  show_logo
  echo -e "${NC}"
  echo "–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: $SCRIPT_VERSION"
  echo "RPC: $RPC_URL"
  rv=$(curl -s "$VERSIONS_FILE_URL" | grep "^${SCRIPT_NAME}=" | cut -d'=' -f2)
  if [[ -n $rv ]]; then
    if [[ $rv != $SCRIPT_VERSION ]]; then
      echo "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $rv"
      echo "  wget -O BITZ-CLI.sh $SCRIPT_FILE_URL && chmod +x BITZ-CLI.sh"
    else
      echo "‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è."
    fi
  else
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
  fi
  echo
}

pause(){ read -rp "–ù–∞–∂–º–∏—Ç–µ Enter..."; }

# 1) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies(){
  header
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
  sudo apt update && sudo apt upgrade -y
  sudo apt install -y screen curl nano build-essential pkg-config libssl-dev clang jq

  if ! command -v cargo &>/dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Rust..."
    curl https://sh.rustup.rs -sSf | sh -s -- -y
    source "$HOME/.cargo/env"
    echo 'source "$HOME/.cargo/env"' >> ~/.bashrc
  fi

  if ! command -v solana &>/dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Solana CLI..."
    sh -c "$(curl -sSfL https://release.solana.com/v1.18.2/install)"
    echo 'export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"' >> ~/.bashrc
    source ~/.bashrc
  fi

  solana config set --url "$RPC_URL"
  echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
  pause
}

# 2) –°–æ–∑–¥–∞–Ω–∏–µ/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –∫–æ—à–µ–ª—å–∫–∞
create_wallet(){
  header
  if [[ -f "$HOME/.config/solana/id.json" ]]; then
    read -rp "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª—ë–∫? (yes/no): " yn
    [[ $yn != yes ]] && { echo "–û—Ç–º–µ–Ω–∞."; pause; return; }
    solana-keygen new --force
  else
    solana-keygen new
  fi
  pause
}

# 3) –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
show_private_key(){
  header
  echo "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:"
  cat "$HOME/.config/solana/id.json"
  pause
}

# 4) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BITZ
install_bitz(){
  header
  if ! command -v cargo &>/dev/null; then echo "Cargo –Ω–µ –Ω–∞–π–¥–µ–Ω."; pause; return; fi
  echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ BITZ..."
  cargo install bitz --force
  pause
}

# 5) –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥
start_miner(){
  header
  if ! command -v bitz &>/dev/null; then echo "'bitz' –Ω–µ –Ω–∞–π–¥–µ–Ω."; pause; return; fi
  read -rp "–Ø–¥–µ—Ä –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ (1-16): " CORES
  [[ ! $CORES =~ ^[0-9]+$ ]] && { echo "–ù—É–∂–Ω–æ —á–∏—Å–ª–æ!"; pause; return; }
  LOG=~/bitz.log; rm -f "$LOG"
  FFLAGS=$(build_fee_flags)
  screen -dmS bitz bash -c "bitz $FFLAGS collect --cores $CORES 2>&1 | tee -a '$LOG'"
  sleep 2
  screen -list | grep -q "\.bitz" && echo "‚úÖ –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (–ª–æ–≥: $LOG)" || echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ (—Å–º. $LOG)"
  pause
}

# 6) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥
stop_miner(){
  header
  screen -list | grep -q "\.bitz" && screen -XS bitz quit && echo "üõë –ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω." || echo "‚ÑπÔ∏è –ú–∞–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω."
  pause
}

# 7) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
check_account(){
  header
  bitz $(build_fee_flags) account
  pause
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Helius (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å empty)
get_current_fee(){
  hb=$(curl -s -X POST -H "Content-Type: application/json" \
    -d '{"jsonrpc":"2.0","id":1,"method":"getLatestBlockhash","params":[{"commitment":"confirmed"}]}' \
    "$RPC_URL" | jq -r '.result.value.blockhash // empty')
  [[ -z $hb ]] && return
  curl -s -X POST -H "Content-Type: application/json" \
    -d "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getFeeCalculatorForBlockhash\",\"params\":[\"$hb\",{\"commitment\":\"confirmed\"}]}" \
    "$RPC_URL" | jq -r '.result.value.feeCalculator.lamportsPerSignature // empty'
}

# –§–æ–ª–ª–±—ç–∫: –ø—É–±–ª–∏—á–Ω—ã–π mainnet RPC
get_mainnet_fee(){
  solana fees --url https://api.mainnet-beta.solana.com \
    | awk '/Lamports per signature/ {print $4}'
}

# 8) –û–∂–∏–¥–∞–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—ã –¥–æ –ø–æ—Ä–æ–≥–∞
wait_for_low_fee(){
  echo "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–ª–∞—Ç—É <= $MIN_FEE_TARGET lamports..."
  while :; do
    fee=$(get_current_fee)
    (( ! fee )) && fee=$(get_mainnet_fee)
    echo "  –ø–ª–∞—Ç–∞ = $fee"
    (( fee <= MIN_FEE_TARGET )) && { echo "‚úÖ OK: $fee"; break; }
    sleep 60
  done
}

# 9) –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é
show_fee_info(){
  header
  fee=$(get_current_fee)
  if [[ -z $fee ]]; then
    fee=$(get_mainnet_fee)
    echo "Lamports per signature (fallback): $fee"
  else
    echo "Lamports per signature (helius): $fee"
  fi
  pause
}

# 10) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏
set_fee_settings(){
  header
  read -rp "PRIORITY_FEE (–º–∏–∫—Ä–æ–ª–∞–º–ø/CU) [$PRIORITY_FEE]: " x && [[ $x ]] && PRIORITY_FEE=$x
  read -rp "WAIT_ON_FEE (true/false) [$WAIT_ON_FEE]: " x && [[ $x ]] && WAIT_ON_FEE=$x
  read -rp "MIN_FEE_TARGET (lamports/signature) [$MIN_FEE_TARGET]: " x && [[ $x ]] && MIN_FEE_TARGET=$x
  echo "‚úÖ –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
  pause
}

# 11) –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã (claim)
claim_tokens(){
  header
  [[ $WAIT_ON_FEE == true ]] && wait_for_low_fee
  addr=$(bitz account | awk '/Address/ {print $2}')
  FFLAGS=$(build_fee_flags)
  echo "‚ñ∂Ô∏è Claim ‚Üí $addr ($FFLAGS)"
  bitz $FFLAGS claim --to "$addr" || echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ claim"
  pause
}

# 12) –£–¥–∞–ª–∏—Ç—å –≤—Å—ë
uninstall_node(){
  header
  read -rp "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë? (yes/no): " yn
  [[ $yn != yes ]] && { echo "–û—Ç–º–µ–Ω–∞."; pause; return; }
  cargo uninstall bitz 2>/dev/null
  rm -rf ~/.cargo ~/.rustup ~/.local/share/solana ~/.config/solana ~/bitz.log
  sudo apt remove --purge -y screen jq clang pkg-config libssl-dev
  sudo apt autoremove -y
  echo "‚úÖ –í—Å—ë —É–¥–∞–ª–µ–Ω–æ."
  pause
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_menu(){
  while :; do
    header
    echo "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "2) –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫"
    echo "3) –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"
    echo "4) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BITZ"
    echo "5) –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "6) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
    echo "7) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    echo "8) –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã (claim)"
    echo "9) –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é"
    echo "10) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏"
    echo "11) –£–¥–∞–ª–∏—Ç—å –≤—Å—ë"
    echo "12) –í—ã–π—Ç–∏"
    read -rp "üëâ –í—ã–±–æ—Ä: " c
    case $c in
      1) install_dependencies   ;;
      2) create_wallet         ;;
      3) show_private_key      ;;
      4) install_bitz          ;;
      5) start_miner           ;;
      6) stop_miner            ;;
      7) check_account         ;;
      8) claim_tokens          ;;
      9) show_fee_info         ;;
      10) set_fee_settings     ;;
      11) uninstall_node       ;;
      12) exit 0               ;;
      *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." && sleep 1 ;;
    esac
  done
}

show_menu
