#!/bin/bash
#-----------------------------------------------------------
# Hyperlane Node Manager ‚Äî Custom Edition
#
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π Hyperlane:
#   ‚Ä¢ Docker-–æ–±—Ä–∞–∑: gcr.io/abacus-labs-dev/hyperlane-agent:agents-v1.0.0
#
# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
#   - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
#   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
#   - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
#   - –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
#-----------------------------------------------------------

##############################################################################
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
##############################################################################
SCRIPT_NAME="hype"               # –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ versions.txt
SCRIPT_VERSION="1.0.0"           # –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞
VERSIONS_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/versions.txt"
SCRIPT_FILE_URL="https://raw.githubusercontent.com/k2wGG/scripts/main/hype.sh"

##############################################################################
# 2. –¶–≤–µ—Ç–∞ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)
##############################################################################
declare -r RED='\033[0;31m'
declare -r GREEN='\033[0;32m'
declare -r YELLOW='\033[1;33m'
declare -r BLUE='\033[0;34m'
declare -r CYAN='\033[0;36m'
declare -r MAGENTA='\033[0;35m'
declare -r WHITE='\033[1;37m'
declare -r BOLD='\033[1m'
declare -r NC='\033[0m'

##############################################################################
# 3. –ò–∫–æ–Ω–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
##############################################################################
declare -r ICON_OK="‚úîÔ∏è"
declare -r ICON_FAIL="‚ùó"
declare -r ICON_WAIT="‚åõ"
declare -r ICON_INSTALL="üîß"
declare -r ICON_SUCCESS="üéä"
declare -r ICON_WARN="‚ö†Ô∏è"
declare -r ICON_NODE="üíª"
declare -r ICON_INFO="‚ÑπÔ∏è"
declare -r ICON_DELETE="üöÆ"
declare -r ICON_REFRESH="üîÉ"
declare -r ICON_LOGS="üìù"
declare -r ICON_EXIT="üö´"

##############################################################################
# 4. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
##############################################################################
declare -r BASE_DIR="$HOME/hyperlane_db_base"
declare -r CONTAINER_NAME="hyperlane"
declare -r DOCKER_IMAGE="gcr.io/abacus-labs-dev/hyperlane-agent:agents-v1.0.0"

##############################################################################
# 5. –§—É–Ω–∫—Ü–∏—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ versions.txt
##############################################################################
auto_update() {
    echo -e "${CYAN}–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${SCRIPT_VERSION}${NC}"
    echo -e "${CYAN}–°–∫–∞—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Ñ–∞–π–ª –≤–µ—Ä—Å–∏–π...${NC}"
    
    remote_versions=$(curl -s "$VERSIONS_FILE_URL")
    if [ -z "$remote_versions" ]; then
        echo -e "${YELLOW}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä—Å–∏—è—Ö. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.${NC}"
        return
    fi

    remote_version=$(echo "$remote_versions" | grep "^${SCRIPT_NAME}=" | cut -d '=' -f2)
    if [ -z "$remote_version" ]; then
        echo -e "${YELLOW}–í —Ñ–∞–π–ª–µ versions.txt –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è '${SCRIPT_NAME}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.${NC}"
        return
    fi

    if [ "$remote_version" != "$SCRIPT_VERSION" ]; then
        echo -e "${CYAN}–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ (v${remote_version}). –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...${NC}"
        curl -s -o "$0.new" "$SCRIPT_FILE_URL"
        if [ -f "$0.new" ]; then
            cp "$0.new" "$0"
            chmod +x "$0"
            echo -e "${GREEN}–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ v${remote_version}. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.${NC}"
            rm -f "$0.new"
            exit 0
        else
            echo -e "${RED}–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç.${NC}"
        fi
    else
        echo -e "${GREEN}–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ (v${SCRIPT_VERSION}) –∞–∫—Ç—É–∞–ª—å–Ω–∞.${NC}"
    fi
}

##############################################################################
# 6. –§—É–Ω–∫—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è curl (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∫–∞)
##############################################################################
ensure_curl_installed() {
    if ! command -v curl &>/dev/null; then
        echo -e "${GREEN}[INFO] curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...${NC}"
        if command -v apt-get &>/dev/null; then
            sudo apt-get update && sudo apt-get install -y curl
        else
            echo -e "${RED}[ERROR] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ curl –≤—Ä—É—á–Ω—É—é.${NC}"
            exit 1
        fi
    fi
}

##############################################################################
# 7. –§—É–Ω–∫—Ü–∏—è: –í—ã–≤–æ–¥ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ ASCII‚Äë–∞—Ä—Ç –ª–æ–≥–æ—Ç–∏–ø–∞
##############################################################################
show_logo() {
cat <<'EOF'
 _   _           _  _____      
| \ | |         | ||____ |     
|  \| | ___   __| |    / /_ __ 
| . ` |/ _ \ / _` |    \ \ '__|
| |\  | (_) | (_| |.___/ / |   
\_| \_/\___/ \__,_|\____/|_|   
                               
Hyperlane Node Manager ‚Äî —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏ @Nod3r
EOF
}

##############################################################################
# 8. –§—É–Ω–∫—Ü–∏—è: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
##############################################################################
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

##############################################################################
# 9. –§—É–Ω–∫—Ü–∏—è: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
##############################################################################
log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

##############################################################################
# 10. –§—É–Ω–∫—Ü–∏—è: –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–º–∫–∏ –º–µ–Ω—é
##############################################################################
draw_menu_frame() {
    local title="$1"
    echo -e "${MAGENTA}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    printf "${MAGENTA}‚îÇ${NC} %-42s ${MAGENTA}  ‚îÇ\n" "$title"
    echo -e "${MAGENTA}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
}

##############################################################################
# 11. –§—É–Ω–∫—Ü–∏—è: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
##############################################################################
install_node() {
    clear
    log_info "–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã Hyperlane..."
    
    echo -e "${ICON_WAIT} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    sudo apt update -y && sudo apt upgrade -y

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if ! command -v docker &>/dev/null; then
        echo -e "${ICON_WAIT} –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
        sudo apt install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker
    else
        echo -e "${ICON_OK} Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi

    echo -e "${ICON_WAIT} –ó–∞–≥—Ä—É–∑–∫–∞ Docker-–æ–±—Ä–∞–∑–∞..."
    docker pull --platform linux/amd64 ${DOCKER_IMAGE}

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo -ne "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:${NC} "
    read -r NAME
    echo -ne "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç EVM –∫–æ—à–µ–ª—å–∫–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x):${NC} "
    read -r PRIVATE_KEY

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–¥—ã
    mkdir -p "$BASE_DIR"
    chmod -R 777 "$BASE_DIR"

    echo -e "${ICON_WAIT} –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker run -d -it \
        --name "${CONTAINER_NAME}" \
        --mount type=bind,source="$BASE_DIR",target=/hyperlane_db_base \
        ${DOCKER_IMAGE} \
        ./validator \
        --db /hyperlane_db_base \
        --originChainName base \
        --reorgPeriod 1 \
        --validator.id "$NAME" \
        --checkpointSyncer.type localStorage \
        --checkpointSyncer.folder base \
        --checkpointSyncer.path /hyperlane_db_base/base_checkpoints \
        --validator.key "$PRIVATE_KEY" \
        --chains.base.signer.key "$PRIVATE_KEY" \
        --chains.base.customRpcUrls https://base.llamarpc.com

    if [ $? -eq 0 ]; then
        log_info "–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        echo -e "${ICON_INFO} –õ–æ–≥–∏: docker logs -f ${CONTAINER_NAME}"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!"
        exit 1
    fi

    echo -e "${ICON_WAIT} –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤..."
    sleep 2
    docker logs -f "${CONTAINER_NAME}"
    read -n1 -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..." key
}

##############################################################################
# 12. –§—É–Ω–∫—Ü–∏—è: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
##############################################################################
update_node() {
    clear
    echo -e "\n${BLUE}${ICON_REFRESH} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Hyperlane...${NC}"
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Docker-–æ–±—Ä–∞–∑–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    log_info "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–¥—ã!"
    read -n1 -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..." key
}

##############################################################################
# 13. –§—É–Ω–∫—Ü–∏—è: –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã
##############################################################################
view_logs() {
    clear
    echo -e "\n${BLUE}${ICON_LOGS} –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã Hyperlane...${NC}"
    docker logs -f "${CONTAINER_NAME}"
    read -n1 -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..." key
}

##############################################################################
# 14. –§—É–Ω–∫—Ü–∏—è: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
##############################################################################
remove_node() {
    clear
    echo -e "\n${BLUE}${ICON_DELETE} –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Hyperlane...${NC}"
    
    echo -e "${ICON_WAIT} –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker stop "${CONTAINER_NAME}" && docker rm "${CONTAINER_NAME}"

    if [ -d "$BASE_DIR" ]; then
        echo -e "${ICON_WAIT} –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–æ–¥—ã..."
        rm -rf "$BASE_DIR"
        echo -e "${ICON_OK} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–¥—ã —É–¥–∞–ª–µ–Ω–∞"
    fi

    log_info "–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
    read -n1 -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..." key
}

##############################################################################
# 15. –§—É–Ω–∫—Ü–∏—è: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
##############################################################################
show_menu() {
    clear
    show_logo
    echo
    draw_menu_frame "HYPERLANE NODE MANAGER"
    echo -e "${CYAN}1)${NC} –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É    ${ICON_INSTALL}"
    echo -e "${CYAN}2)${NC} –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É      ${ICON_REFRESH}"
    echo -e "${CYAN}3)${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤     ${ICON_LOGS}"
    echo -e "${CYAN}4)${NC} –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É      ${ICON_DELETE}"
    echo -e "${CYAN}5)${NC} –í—ã—Ö–æ–¥             ${ICON_EXIT}"
    echo
    read -p "$(echo -e ${GREEN}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1-5]:${NC} )" choice
}

##############################################################################
# 16. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
##############################################################################
main() {
    ensure_curl_installed
    auto_update
    while true; do
        show_menu
        case "$choice" in
            1) install_node ;;
            2) update_node ;;
            3) view_logs ;;
            4) remove_node ;;
            5) echo -e "${ICON_SUCCESS} –í—ã—Ö–æ–¥...${NC}"; exit 0 ;;
            *) echo -e "${ICON_FAIL} –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5."; sleep 2 ;;
        esac
    done
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
